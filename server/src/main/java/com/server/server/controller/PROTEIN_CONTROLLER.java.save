package com.server.server.controller;

import org.springframework.http.HttpEntity;
import javax.servlet.http.HttpServletRequest;
import java.io.IOException;
import javax.servlet.http.HttpServletResponse;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.bind.annotation.PostMapping;
import java.util.List;
import org.springframework.web.bind.annotation.CrossOrigin;
import javax.persistence.Query;
import javax.persistence.criteria.CriteriaQuery;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import com.server.server.model.PROTEIN;
import com.server.server.repository.ProteinRepository;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;


@RestController    // This means that this class is a Controller
@RequestMapping(path="/protein") 
public class PROTEIN_CONTROLLER {
	
	@Autowired
	private ProteinRepository protein_repo;

/*       @GetMapping(path="/all")
	public @ResponseBody Iterable<PROTEIN> getAllProtein() {
		// This returns a JSON or XML with the users
		return protein_repo.findAll();
	}
	
*/

/*
         @GetMapping(path="/jquery/{number}")
        public @ResponseBody  List<CriteriaQuery> getAllQuery(@PathVariable("number") int number) {
                // This returns a JSON or XML with the users
                return protein_repo.processJQuery(number);
        }
*/


/* @GetMapping(path="/jquery/{name_attribute}/{number}")
       public @ResponseBody  List<CriteriaQuery> getAllQuery(@PathVariable("name_attribute") String name_attribute , @PathVariable("number") int number) {
               // This returns a JSON or XML with the users
               return protein_repo.processJQuery(name_attribute , number);
       }

*/

/*
@CrossOrigin(origins = "http://localhost:3000")
	@PostMapping(path="/taxon")
	@ResponseBody
	public String findTaxon(){
       return "Done";
}
*/
/*@CrossOrigin(origins = "http://localhost:3000")
	@PostMapping(path="/taxon")
	@ResponseBody
	public String findTaxon(HttpServletRequest request, HttpServletResponse response) throws IOException{
		 String jsonString = request.toString();
		System.out.println(request.getAttributeNames());
		return "DONE";
}
*/


@CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path="/taxon")
    @ResponseBody
    public String findTaxon(HttpEntity<String> httpEntity) throws IOException{
		
		String json = httpEntity.getBody();
		ObjectMapper objectMapper = new ObjectMapper();

		try {

		    JsonNode node = objectMapper.readValue(json, JsonNode.class);
		    System.out.println(node.toString());

		    JsonNode doorsNode = node.get("body");
		    String body = doorsNode.toString();
		    System.out.println("body = " + body);

		    JsonNode innerNode = node.get("id");
                    String body_id = innerNode.toString();
                    System.out.println("body_id = " + body_id);


/*		    JsonNode array = node.get("rules");
		    JsonNode jsonNode = array.get(0);
		    String id = jsonNode.asText();
		    System.out.println("id  = " + id);
*/

		} catch (IOException e) {
		    e.printStackTrace();
		}
          return "DONE";
}


	@CrossOrigin(origins = "http://localhost:3000")
	@GetMapping(path="/taxon/{taxon_id}")
	 @ResponseBody
	 public List<String> findTaxon(@PathVariable int taxon_id){
		return protein_repo.searchProteinbyProteinTaxon_id2(taxon_id);
	}



/*
        @GetMapping(path="/taxon/{taxon_id}/{taxon_id2}")
	 @ResponseBody
	 public  List<PROTEIN> findTaxon(@PathVariable("taxon_id") int taxon_id,@PathVariable("taxon_id2") int taxon_id2){
		protein_repo.searchTaxonID(taxon_id);
		return protein_repo.searchTaxonID(taxon_id2);
	}
*/
/*	@GetMapping(path="/{ontology_id}")
	 @ResponseBody
	 public  List<PROTEIN> findOntology(@PathVariable int ontology_id){
		return protein_repo.searchTaxonIDAndOntology(ontology_id);
	}
*/

	   @GetMapping(path="/jquery/{name_attribute}/{number}/{number2}")
       public @ResponseBody  List<CriteriaQuery> getAllQuery(@PathVariable("name_attribute") String name_attribute,@PathVariable("number") int number,@PathVariable("number2") int number2) {
               // This returns a JSON or XML with the users
               return protein_repo.processJQuery(name_attribute,number,number2);
       }
	   @GetMapping(path="/jquery2/{name_attribute}/{name}/{name2}")
       public @ResponseBody  List<CriteriaQuery> getAllQuery2(@PathVariable("name_attribute") String name_attribute,@PathVariable("name") String name,@PathVariable("name2") String name2) {
               // This returns a JSON or XML with the users
               return protein_repo.processJQuery2(name_attribute,name,name2);
       }
}
