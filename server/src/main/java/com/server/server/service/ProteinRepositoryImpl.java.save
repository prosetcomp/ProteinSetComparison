package com.server.server.service;



import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import javax.sql.DataSource;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import org.springframework.beans.factory.annotation.Autowired;
import java.io.*;

import java.util.*;
import org.springframework.web.context.request.RequestContextHolder;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.stereotype.Service;
import java.util.regex.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.server.server.model.PROTEIN;
import com.server.server.repository.ProteinRepositoryCustom;
import org.json.JSONArray;
import org.json.JSONObject;
import java.util.HashMap;


@Service
public class ProteinRepositoryImpl implements ProteinRepositoryCustom {

        @PersistenceContext
        private EntityManager em;
        String sessionID;
	public Connection conn;
        
       int map_size;
       
        public void processJQuery(List<List<String>> key_value_list, String id_json, Connection connection) throws SQLException{
          /* List<List<CriteriaQuery>> criteriaList = new ArrayList<>();
           sessionID=id_json;
           conn=connection;
	  System.out.println("Connection " + conn);
           System.out.println("Session_id :" + sessionID);
           map_size=key_value2.size();
           System.out.println("Map_size:" + map_size);
           //Set Up Criteria For Each Query
            for(int a = 0 ;a<key_value_list.size();a++) {
				  List<String> list_element=key_value_list.get(a);
				  List<CriteriaQuery> temp_criteria = new ArrayList<>();
				  for (Map.Entry<String, String> entry :list_element.entrySet()){
					  
					  String key=entry.getValue();
					  String value =entry.getKey();
					  
	*/


	 List<List<CriteriaQuery>> criteriaList = new ArrayList<>();
           sessionID=id_json;
           conn=connection;
	  System.out.println("Connection " + conn);
           System.out.println("Session_id :" + sessionID);
           map_size= key_value_list.size();
           System.out.println("Map_size:" + map_size);
           //Set Up Criteria For Each Query
            for(int a = 0 ;a< key_value_list.size();a++) {
				  List<String> list_element= key_value_list.get(a);
				  List<CriteriaQuery> temp_criteria = new ArrayList<>();
				  for (int b=0;b<list_element.size();b++){
					  String[] parts =list_element.get(b).split("=");
					  String key=parts[0];
					  String value =parts[1];
					  
					System.out.println("Key=" + key + " Value=" + value);

						Pattern pattern = Pattern.compile("(?i)(GO:[0]+|GO:)");
						Pattern pattern2 = Pattern.compile("(?i)(pf[0]+|pf)");
						Pattern pattern3 = Pattern.compile("(?i)(ipr[0]+|ipr)");
						Pattern pattern4 = Pattern.compile("(?i)(R-HSA-[0]+|R-HSA-)");
						Matcher matcher = pattern.matcher(value);
						Matcher matcher2 = pattern2.matcher(value);
						Matcher matcher3 = pattern3.matcher(value);
						Matcher matcher4 = pattern4.matcher(value);
						String regex_part = null;
						if (matcher.find())
						{
							regex_part=matcher.group();
							value=value.replace(regex_part, "");
						   
						}
						else if (matcher2.find())
						{
							regex_part=matcher2.group();
							value=value.replace(regex_part, "");
						   
						}
						
						else if (matcher3.find())
						{
							regex_part=matcher3.group();
							value=value.replace(regex_part, "");
						   
						}
						else if (matcher4.find())
						{
							regex_part=matcher4.group();
							value=value.replace(regex_part, "");
						   
						} 



						  String regex = "[0-9]+";
						  if(value.matches(regex)) {
							  int foo = Integer.parseInt(value);
							  
							  if(key.equals("disease_accession")) {
					            	CriteriaQuery cq =searchProteinbyDiseaseAcc (foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("disease_mim")) {
					            	CriteriaQuery cq =searchProteinbyDiseaseMim (foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("domain_iprid")) {
					            	CriteriaQuery cq =searchProteinbyDomainIpr_id(foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("disease_mim")) {
					            	CriteriaQuery cq =searchProteinbyDiseaseMim(foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("domain_pfam")) {
					            	CriteriaQuery cq =searchProteinbyDomainPfam(foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("publication_pmid")) {
					            	CriteriaQuery cq =searchProteinbyPublicationPmid(foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("pathway_id")) {
					            	CriteriaQuery cq =searchProteinbyPathwayId(foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("protein_isreviewed")) {
					            	CriteriaQuery cq =searchProteinbyProteinIs_reviewed(foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("protein_taxonid")) {
					            	CriteriaQuery cq =searchProteinbyProteinTaxon_id(foo);
					            	temp_criteria.add(cq);
					           }
							else if (key.equals("go_id")) {
					            	CriteriaQuery cq =searchProteinbyGo_termsTerm_id(foo);
					            	temp_criteria.add(cq);
					           }  
								criteriaList.add(a, temp_criteria);;
								System.out.println(criteriaList.get(a));
						  }
						  else {
						
						        if(key.equals("disease_acronym")) {
							System.out.println("Disease acronym");
			        	                CriteriaQuery cq =searchProteinbyDiseaseAcronym (value);
		        	            		temp_criteria.add(cq);
		        	               } 
							  else if (key.equals("disease_identifier")) {
					            	CriteriaQuery cq =searchProteinbyDiseaseIdentifier(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("goterms_name")) {
					            	CriteriaQuery cq =searchProteinbyGo_termsName(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("domain_name")) {
					            	CriteriaQuery cq =searchProteinbyDomainName(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("taxon_name")) {
					            	CriteriaQuery cq = searchProteinbyTaxonName(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("pdb_pdb")) {
					            	CriteriaQuery cq = searchProteinbyProtein_pdbPdb(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("pdb_chain")) {
					            	CriteriaQuery cq = searchProteinbyProtein_pdbChain(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("protein_name")) {
					            	CriteriaQuery cq = searchProteinbyProteinName(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("secondary_accession")) {
					            	CriteriaQuery cq = searchProteinbyPrimary_SecondarySecondaryAccession(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("publication_title")) {
					            	CriteriaQuery cq = searchProteinbyPublicationTitle(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("pathway_name")) {
					            	CriteriaQuery cq = searchProteinbyPathwayName(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("protein_accession")) {
					            	CriteriaQuery cq = searchProteinbyProteinAccession(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("protein_id")) {
					            	CriteriaQuery cq = searchProteinbyProteinId(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("allergome")||key.equals("biocyc") || key.equals("biogrid") || 
									  key.equals("biomuta") || key.equals("chembl") || key.equals("dictybase")
									  || key.equals("drugbank") || key.equals("echobase") || key.equals("embl")
									  || key.equals("embl-cds") || key.equals("ensembl") || key.equals("ensemblgenome")
									  || key.equals("ensemblgenome_pro") || key.equals("ensemblgenome_trs") || key.equals("ensembl_pro")
									  || key.equals("ensembl_trs") || key.equals("flybase") || key.equals("genecards")
									  || key.equals("genedb") || key.equals("geneid") || key.equals("gene_name")
									  || key.equals("gene_orderedlocusname") || key.equals("gene_orfname") || key.equals("genereviews") 
									  || key.equals("gene_synonym") || key.equals("gi") || key.equals("hgnc")
									  || key.equals("kegg") || key.equals("orthodb") || key.equals("peroxibase")
									  || key.equals("pombase") || key.equals("rebase") || key.equals("refseq")
									  || key.equals("refseq_nt") || key.equals("rgd") || key.equals("sgd") 
									  || key.equals("string") || key.equals("unigene") || key.equals("uniparc")
									  || key.equals("unipathway") || key.equals("uniprotkb-id") || key.equals("uniref100") 
									  || key.equals("uniref50") || key.equals("uniref90") || key.equals("vectorbase")
									  || key.equals("wormbase") || key.equals("xenbase")
									  ) {
					            	CriteriaQuery cq = searchProteinbyProtein_crossrefTypeCrossref(key,value);
					            	temp_criteria.add(cq);
					            	
					           }
							  criteriaList.add(a, temp_criteria);
						  }
				  }
					  
					  
				//  System.out.println(criteriaList);
				  
			 }
            		
            		parseListOfList(criteriaList,conn);
            
              
        	 }
   
	int current_position=1;        
        public void parseListOfList(List<List<CriteriaQuery>> criteriaList, Connection conn) throws SQLException{
        	
        		
        		 for(int a = 0 ;a<map_size;a++) {
        			 
			 	  List<CriteriaQuery> cl =criteriaList.get(a);
        			  runCriteriaList(cl,a+1);
			 	  current_position++; 
			 }
        		 current_position=1;
        		 
        	}

        public void runCriteriaList(List<CriteriaQuery> cl,int query_number){
	        	int i = cl.size()-1;
	        List<Set<String>> returnList= new ArrayList<Set<String>>();    
	        while(i>-1) {
	         	CriteriaQuery cquery=cl.get(i);
		        List<String> result = em.createQuery(cquery).getResultList();
		  		Set<String> resultSet = new HashSet<>(result);
				returnList.add(resultSet);
		                i--;
	         }
	        processSetList("AND",returnList,query_number);  
             
        }
        
  

	 List<Set<String>> collect_lastset =new ArrayList<Set<String>>();
     public void processSetList(String OperationList , List<Set<String>> returnList,int query_number) {	   
	        Set<String> finalIntersectionSet = returnList.get(0);
	        Set<String> lastset = new HashSet<>();
	        //List<Set<String>> collect_lastset =new ArrayList<Set<String>>();
  	        OperationList="AND";
        	if(returnList.size()==1) {
                                lastset.addAll(finalIntersectionSet);
                         }
       		 for(int i=1;i<returnList.size();i++) {
       			 finalIntersectionSet.retainAll(returnList.get(i));
       			 lastset.addAll(finalIntersectionSet);
  		 }
       		 collect_lastset.add(lastset);                         
			 System.out.println("Collect_lastset: " + collect_lastset);
		System.out.println("Current_position=" + current_position);
	         if(current_position==map_size) {
				 createTempTable(sessionID,collect_lastset);
	       	 }
    			writeFile(lastset);
			System.out.println("LastSet" + " " + lastset);	
			 			     		
       	 }
        
        public void writeFile(Set<String> lastset) {
        		String fileName= "/home/ilayda/result.txt";
            try{  
                   PrintWriter outputStream = new PrintWriter(fileName);
                   outputStream.println("Result is :" + " " +lastset);
                   outputStream.close();     
            }
            catch(FileNotFoundException fnfe){
            	System.out.println(fnfe.getMessage());
            }
            // outputStream.close();
        }   


//        @Autowired
//		DataSource datasource;
		public void createTempTable(String session_ID, List<Set<String>> collect_lastset)  {
			System.out.println("Inside Test Method");
		    try {
		//    		Connection connection = conn;
		  //  		connection=datasource.getConnection();
		    System.out.println("In the method connection:" + conn);    
		 for(int group=1;group<=collect_lastset.size();group++) {
		        	 Statement stmt = conn.createStatement();	
			     String table_name = "protlist"+group+"_"+session_ID;
		        	 System.out.println(table_name);
		        	 String sql = "CREATE TEMPORARY TABLE " + table_name +
	                            "(ACCESSION VARCHAR(40) not NULL ," +
	                            "PRIMARY KEY my_pkey (ACCESSION))";
						  
		        System.out.println(sql);
		        stmt.executeUpdate(sql);
		        String insert_sql="INSERT INTO " +table_name +"(ACCESSION) VALUES(?)";
		        PreparedStatement ps = conn.prepareStatement(insert_sql);
				System.out.println(insert_sql);
				List<String> accession = new ArrayList<>();
				accession.addAll(collect_lastset.get(group-1));
			    System.out.println("Accession" + accession);
			    //BATCH
				for(String protein:accession){
					   ps.setString(1, protein);
				       ps.addBatch();
			    }
				ps.executeBatch();
				
				//CHECK TABLE AND ELEMENTS
				ResultSet rs = stmt.executeQuery("select * from " + table_name);
				 System.out.println("Table name:" + table_name);
				while(rs.next()) {
			          System.out.println(rs.getString("ACCESSION"));
				}
				        
					        	 
		     }
		     //Call Stored Procedure
		     callStoredProcedure(conn,map_size,"session_id");
		               
		    } catch (SQLException e) {
		        // TODO Auto-generated catch block
		        e.printStackTrace();
		    } catch(NullPointerException e){
		        System.out.println("Null Pointer exception");
		    }
		}
		public void callStoredProcedure2(Connection connection , int querynumber ,String session_id) throws SQLException {
		if(querynumber==1) {
			      CallableStatement gm_1set =connection.prepareCall("{ call GM_1SET(?) }");
			      gm_1set.setString(1,"sessionID");
			      gm_1set.execute();
		              System.out.println("Callable 1");  
			      ResultSet rs_gm_a = gm_1set.executeQuery("select * from GM_a_sessionID");
			      System.out.println("GM_1SET && GM_a_sessionID"); 
			while(rs_gm_a.next()) {
	                       System.out.println(rs_gm_a.getString("ONTOLOGY"));
	              }
			   
			//JOIN 
 CallableStatement gm_1set_join =connection.prepareCall("{ call 1SET_GM_a_(?) }");
	              gm_1set_join.setString(1, "sessionID");
	              gm_1set_join.execute(); 
	              ResultSet rs_gm_a_join =gm_1set_join.getResultSet();
	              while(rs_gm_a_join.next()) {
                      System.out.println("GO_ID: " + rs_gm_a_join.getString("GO_ID"));
                      System.out.println("NAME: " +rs_gm_a_join.getString("NAME"));
                      System.out.println("PARENTS: " +rs_gm_a_join.getString("PARENTS"));
                      System.out.println("DEPTH: " +rs_gm_a_join.getString("DEPTH"));
                      
             }   
	            //SET
		      CallableStatement gb_1set =connection.prepareCall("{ call GB_1SET(?) }");
	              gb_1set.setString(1, "sessionID");
	              gb_1set.execute();  
	              System.out.println("Callable 1");  
			      ResultSet rs_gb_a = gb_1set.executeQuery("select * from GB_a_sessionID");
			      System.out.println("GB_1SET && GB_a_sessionID"); 
	              while(rs_gb_a.next()) {
	                        System.out.println(rs_gb_a.getString("ONTOLOGY"));
	              }   
			//JOIN
 CallableStatement gb_1set_join =connection.prepareCall("{ call 1SET_GB_a_(?) }");
	              gb_1set_join.setString(1, "sessionID");
	              gb_1set_join.execute(); 
	             ResultSet rs_gb_a_join =gb_1set_join.getResultSet();
	              while(rs_gb_a_join.next()) {
                      System.out.println("GO_ID: " + rs_gb_a_join.getString("GO_ID"));
                      System.out.println("NAME: " +rs_gb_a_join.getString("NAME"));
                      System.out.println("PARENTS: " +rs_gb_a_join.getString("PARENTS"));
                      System.out.println("DEPTH: " +rs_gb_a_join.getString("DEPTH"));
                      
             }  
	              CallableStatement pw_1set =connection.prepareCall("{ call PW_1SET(?) }");
	              pw_1set.setString(1, "sessionID");
	              pw_1set.execute();  
	              System.out.println("Callable 1");  
			      ResultSet rs_pw_a = pw_1set.executeQuery("select * from PW_a_sessionID");
			      System.out.println("PW_1SET && PW_a_sessionID"); 
	              while(rs_pw_a.next()) {
	                        System.out.println(rs_pw_a.getString("PATHWAY"));
	              }  
	              CallableStatement dm_1set =connection.prepareCall("{ call DM_1SET(?) }");
	              dm_1set.setString(1, "sessionID");
	              dm_1set.execute();  
	              System.out.println("Callable 1");  
			      ResultSet rs_dm_a = dm_1set.executeQuery("select * from DM_a_sessionID");
			      System.out.println("DM_1SET && DM_a_sessionID"); 
	              while(rs_dm_a.next()) {
	                        System.out.println(rs_dm_a.getString("DOMAIN"));
	              } 
		}
			else if(querynumber==2) {
				  	System.out.println("Store procedure for 2 set");
				    
				  	//GM2SET
				    CallableStatement gm_2set=connection.prepareCall("{ call GM_2SET(?) }");
				    gm_2set.setString(1, "sessionID");
				    gm_2set.execute();  
                		ResultSet rs_gm_a = gm_2set.executeQuery("select * from GM_a_sessionID");
                		System.out.println("GM_2SET && GM_a_sessionID "); 
                		while(rs_gm_a.next()) {              
                       		        System.out.println(rs_gm_a.getString("ONTOLOGY"));
                		} 
                		ResultSet rs_gm_b = gm_2set.executeQuery("select * from GM_b_sessionID");
                		System.out.println("GM_2SET && GM_b_sessionID ");  
                		while(rs_gm_b.next()) {
                        		                          
                       		        System.out.println(rs_gm_b.getString("ONTOLOGY"));
                		} 
                		ResultSet rs_gm_c = gm_2set.executeQuery("select * from GM_c_sessionID");
                		System.out.println("GM_2SET && GM_c_sessionID "); 
                		while(rs_gm_c.next()) {                          
                       		        System.out.println(rs_gm_c.getString("ONTOLOGY"));
                		} 
                		
                		//GB2SET
                		CallableStatement gb_2set =connection.prepareCall("{ call GB_2SET(?) }");
  	                gb_2set.setString(1, "sessionID");
  	                gb_2set.execute();  
  	                System.out.println("Callable 2");  
  			        ResultSet rs_gb_a = gb_2set.executeQuery("select * from GB_a_sessionID");
  			        System.out.println("GB_2SET && GB_a_sessionID"); 
  	                while(rs_gb_a.next()) {
  	                        System.out.println(rs_gb_a.getString("ONTOLOGY"));
  	                }  
  	                ResultSet rs_gb_b = gb_2set.executeQuery("select * from GB_b_sessionID");
			        System.out.println("GB_2SET && GB_b_sessionID"); 
	                while(rs_gb_b.next()) {
	                        System.out.println(rs_gb_b.getString("ONTOLOGY"));
	                }  
	                ResultSet rs_gb_c = gb_2set.executeQuery("select * from GB_c_sessionID");
			        System.out.println("GB_2SET && GB_c_sessionID"); 
	                while(rs_gb_c.next()) {
	                        System.out.println(rs_gb_c.getString("ONTOLOGY"));
	                }  
	                
	                //PW2SET
	                CallableStatement pw_2set =connection.prepareCall("{ call PW_2SET(?) }");
	                pw_2set.setString(1, "sessionID");
	                pw_2set.execute();  
  	                System.out.println("Callable 2");  
  			        ResultSet rs_pw_a = pw_2set.executeQuery("select * from PW_a_sessionID");
  			        System.out.println("PW_2SET && PW_a_sessionID"); 
  	                while(rs_pw_a.next()) {
  	                        System.out.println(rs_pw_a.getString("PATHWAY"));
  	                }  
  	                ResultSet rs_pw_b = pw_2set.executeQuery("select * from PW_b_sessionID");
			        System.out.println("PW_2SET && PW_b_sessionID"); 
	                while(rs_pw_b.next()) {
	                        System.out.println(rs_pw_b.getString("PATHWAY"));
	                }  
	                ResultSet rs_pw_c = pw_2set.executeQuery("select * from PW_c_sessionID");
			        System.out.println("PW_2SET && PW_c_sessionID"); 
	                while(rs_pw_c.next()) {
	                        System.out.println(rs_pw_c.getString("PATHWAY"));
	                }  
	                
	                //DM2SET
	                CallableStatement dm_2set =connection.prepareCall("{ call DM_2SET(?) }");
		            dm_2set.setString(1, "sessionID");
		            dm_2set.execute();  
		            System.out.println("Callable 1");  
				    ResultSet rs_dm_a = dm_2set.executeQuery("select * from DM_a_sessionID");
				    System.out.println("DM_2SET && DM_a_sessionID"); 
		            while(rs_dm_a.next()) {
		                    System.out.println(rs_dm_a.getString("DOMAIN"));
		            }  
				    ResultSet rs_dm_b = dm_2set.executeQuery("select * from DM_b_sessionID");
				    System.out.println("DM_2SET && DM_b_sessionID"); 
		            while(rs_dm_b.next()) {
		                   System.out.println(rs_dm_b.getString("DOMAIN"));
		            }
		            ResultSet rs_dm_c = dm_2set.executeQuery("select * from DM_c_sessionID");
				    System.out.println("DM_2SET && DM_c_sessionID"); 
		            while(rs_dm_c.next()) {
		                   System.out.println(rs_dm_c.getString("DOMAIN"));
		            }  
		               
				
			}
		else if(querynumber==3) {
					System.out.println("Store procedure for 3 set");
				    //GM3SET
					CallableStatement gm_3set=connection.prepareCall("{ call GM_3SET(?) }");
					gm_3set.setString(1, "sessionID");
					gm_3set.execute();  
             		ResultSet rs_gm_a = gm_3set.executeQuery("select * from GM_a_sessionID");
             		System.out.println("GM_3SET && GM_a_sessionID "); 
             		while(rs_gm_a.next()) {              
                    		        System.out.println(rs_gm_a.getString("ONTOLOGY"));
             		} 
             		ResultSet rs_gm_b = gm_3set.executeQuery("select * from GM_b_sessionID");
             		System.out.println("GM_3SET && GM_b_sessionID ");  
             		while(rs_gm_b.next()) {
                     		                          
                    		        System.out.println(rs_gm_b.getString("ONTOLOGY"));
             		} 
             		ResultSet rs_gm_c = gm_3set.executeQuery("select * from GM_c_sessionID");
             		System.out.println("GM_3SET && GM_c_sessionID "); 
             		while(rs_gm_c.next()) {                          
                    		        System.out.println(rs_gm_c.getString("ONTOLOGY"));
             		} 
             		ResultSet rs_gm_d = gm_3set.executeQuery("select * from GM_d_sessionID");
             		System.out.println("GM_3SET && GM_d_sessionID "); 
             		while(rs_gm_d.next()) {                          
                    		        System.out.println(rs_gm_d.getString("ONTOLOGY"));
             		} 
             		ResultSet rs_gm_e = gm_3set.executeQuery("select * from GM_e_sessionID");
             		System.out.println("GM_3SET && GM_e_sessionID "); 
             		while(rs_gm_e.next()) {                          
                    		        System.out.println(rs_gm_e.getString("ONTOLOGY"));
             		} 
             		ResultSet rs_gm_f = gm_3set.executeQuery("select * from GM_f_sessionID");
             		System.out.println("GM_3SET && GM_f_sessionID "); 
             		while(rs_gm_f.next()) {                          
                    		        System.out.println(rs_gm_f.getString("ONTOLOGY"));
             		} 
             		ResultSet rs_gm_g = gm_3set.executeQuery("select * from GM_g_sessionID");
             		System.out.println("GM_3SET && GM_g_sessionID "); 
             		while(rs_gm_g.next()) {                          
                    		        System.out.println(rs_gm_g.getString("ONTOLOGY"));
             		} 
             		
             		//GB3SET
             		CallableStatement gb_3set =connection.prepareCall("{ call GB_3SET(?) }");
	                gb_3set.setString(1, "sessionID");
	                gb_3set.execute();  
	                System.out.println("Callable 2");  
			        ResultSet rs_gb_a = gb_3set.executeQuery("select * from GB_a_sessionID");
			        System.out.println("GB_3SET && GB_a_sessionID"); 
	                while(rs_gb_a.next()) {
	                        System.out.println(rs_gb_a.getString("ONTOLOGY"));
	                }  
	                ResultSet rs_gb_b = gb_3set.executeQuery("select * from GB_b_sessionID");
	                System.out.println("GB_3SET && GB_b_sessionID"); 
	                while(rs_gb_b.next()) {
                        System.out.println(rs_gb_b.getString("ONTOLOGY"));
	                }  
	                ResultSet rs_gb_c = gb_3set.executeQuery("select * from GB_c_sessionID");
	                System.out.println("GB_3SET && GB_c_sessionID"); 
	                while(rs_gb_c.next()) {
                        System.out.println(rs_gb_c.getString("ONTOLOGY"));
	                }
	                ResultSet rs_gb_d = gb_3set.executeQuery("select * from GB_d_sessionID");
	                System.out.println("GB_3SET && GB_d_sessionID"); 
	                while(rs_gb_d.next()) {
                        System.out.println(rs_gb_d.getString("ONTOLOGY"));
	                }
	                ResultSet rs_gb_e = gb_3set.executeQuery("select * from GB_e_sessionID");
	                System.out.println("GB_3SET && GB_e_sessionID"); 
	                while(rs_gb_e.next()) {
                        System.out.println(rs_gb_e.getString("ONTOLOGY"));
	                }
	                ResultSet rs_gb_f = gb_3set.executeQuery("select * from GB_f_sessionID");
	                System.out.println("GB_3SET && GB_f_sessionID"); 
	                while(rs_gb_f.next()) {
                        System.out.println(rs_gb_f.getString("ONTOLOGY"));
	                }
	                ResultSet rs_gb_g = gb_3set.executeQuery("select * from GB_g_sessionID");
	                System.out.println("GB_3SET && GB_g_sessionID"); 
	                while(rs_gb_g.next()) {
                        System.out.println(rs_gb_g.getString("ONTOLOGY"));
	                }	                
	                //PW3SET
	                
	                CallableStatement pw_3set =connection.prepareCall("{ call PW_3SET(?) }");
	                pw_3set.setString(1, "sessionID");
	                pw_3set.execute();  
  	                System.out.println("Callable 2");  
  			        ResultSet rs_pw_a = pw_3set.executeQuery("select * from PW_a_sessionID");
  			        System.out.println("PW_3SET && PW_a_sessionID"); 
  	                while(rs_pw_a.next()) {
  	                        System.out.println(rs_pw_a.getString("PATHWAY"));
  	                }  
  	                ResultSet rs_pw_b = pw_3set.executeQuery("select * from PW_b_sessionID");
			        System.out.println("PW_3SET && PW_b_sessionID"); 
	                while(rs_pw_b.next()) {
	                        System.out.println(rs_pw_b.getString("PATHWAY"));
	                }  
	                ResultSet rs_pw_c = pw_3set.executeQuery("select * from PW_c_sessionID");
			        System.out.println("PW_3SET && PW_c_sessionID"); 
	                while(rs_pw_c.next()) {
	                        System.out.println(rs_pw_c.getString("PATHWAY"));
	                } 
	                ResultSet rs_pw_d = pw_3set.executeQuery("select * from PW_d_sessionID");
			        System.out.println("PW_3SET && PW_d_sessionID"); 
	                while(rs_pw_d.next()) {
	                        System.out.println(rs_pw_d.getString("PATHWAY"));
	                } 
	                ResultSet rs_pw_e = pw_3set.executeQuery("select * from PW_e_sessionID");
			        System.out.println("PW_3SET && PW_e_sessionID"); 
	                while(rs_pw_e.next()) {
	                        System.out.println(rs_pw_e.getString("PATHWAY"));
	                } 
	                ResultSet rs_pw_f = pw_3set.executeQuery("select * from PW_f_sessionID");
			        System.out.println("PW_3SET && PW_f_sessionID"); 
	                while(rs_pw_f.next()) {
	                        System.out.println(rs_pw_f.getString("PATHWAY"));
	                } 
	                ResultSet rs_pw_g = pw_3set.executeQuery("select * from PW_g_sessionID");
			        System.out.println("PW_3SET && PW_g_sessionID"); 
	                while(rs_pw_g.next()) {
	                        System.out.println(rs_pw_g.getString("PATHWAY"));
	                } 
			
	                //DM3SET
	                CallableStatement dm_3set =connection.prepareCall("{ call DM_3SET(?) }");
		            dm_3set.setString(1, "sessionID");
		            dm_3set.execute();  
		            System.out.println("Callable 1");  
				    ResultSet rs_dm_a = dm_3set.executeQuery("select * from DM_a_sessionID");
				    System.out.println("DM_3SET && DM_a_sessionID"); 
		            while(rs_dm_a.next()) {
		                    System.out.println(rs_dm_a.getString("DOMAIN"));
		            }  
				    ResultSet rs_dm_b = dm_3set.executeQuery("select * from DM_b_sessionID");
				    System.out.println("DM_3SET && DM_b_sessionID"); 
		            while(rs_dm_b.next()) {
		                   System.out.println(rs_dm_b.getString("DOMAIN"));
		            }
		            ResultSet rs_dm_c = dm_3set.executeQuery("select * from DM_c_sessionID");
				    System.out.println("DM_3SET && DM_c_sessionID"); 
		            while(rs_dm_c.next()) {
		                   System.out.println(rs_dm_c.getString("DOMAIN"));
		            } 
		            ResultSet rs_dm_d = dm_3set.executeQuery("select * from DM_d_sessionID");
				    System.out.println("DM_3SET && DM_d_sessionID"); 
		            while(rs_dm_d.next()) {
		                   System.out.println(rs_dm_d.getString("DOMAIN"));
		            } 
		            ResultSet rs_dm_e = dm_3set.executeQuery("select * from DM_e_sessionID");
				    System.out.println("DM_3SET && DM_e_sessionID"); 
		            while(rs_dm_e.next()) {
		                   System.out.println(rs_dm_e.getString("DOMAIN"));
		            } 
		            ResultSet rs_dm_f = dm_3set.executeQuery("select * from DM_f_sessionID");
				    System.out.println("DM_3SET && DM_f_sessionID"); 
		            while(rs_dm_f.next()) {
		                   System.out.println(rs_dm_f.getString("DOMAIN"));
		            } 
		            ResultSet rs_dm_g = dm_3set.executeQuery("select * from DM_g_sessionID");
				    System.out.println("DM_3SET && DM_g_sessionID"); 
		            while(rs_dm_g.next()) {
		                   System.out.println(rs_dm_g.getString("DOMAIN"));
		            } 	
		}	
		else if(querynumber==4) {
			 	System.out.println("Store procedure for 4 set");
			    //GM4SET
			    CallableStatement gm_4set=connection.prepareCall("{ call GM_4SET(?) }");
			    gm_4set.setString(1, "sessionID");
			    gm_4set.execute();  
/*         		ResultSet rs_gm_a = gm_4set.executeQuery("select * from GM_a_sessionID");
         		System.out.println("GM_4SET && GM_a_sessionID "); 
         		while(rs_gm_a.next()) {              
                		        System.out.println(rs_gm_a.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_b = gm_4set.executeQuery("select * from GM_b_sessionID");
         		System.out.println("GM_4SET && GM_b_sessionID ");  
         		while(rs_gm_b.next()) {
                 		                          
                		        System.out.println(rs_gm_b.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_c = gm_4set.executeQuery("select * from GM_c_sessionID");
         		System.out.println("GM_4SET && GM_c_sessionID "); 
         		while(rs_gm_c.next()) {                          
                		        System.out.println(rs_gm_c.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_d = gm_4set.executeQuery("select * from GM_d_sessionID");
         		System.out.println("GM_4SET && GM_d_sessionID "); 
         		while(rs_gm_d.next()) {                          
                		        System.out.println(rs_gm_d.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_e = gm_4set.executeQuery("select * from GM_e_sessionID");
