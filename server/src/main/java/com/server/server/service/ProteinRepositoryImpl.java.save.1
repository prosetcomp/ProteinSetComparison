package com.server.server.service;



import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import javax.sql.DataSource;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import org.springframework.beans.factory.annotation.Autowired;
import java.io.*;

import java.util.*;
import org.springframework.web.context.request.RequestContextHolder;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;
import org.springframework.stereotype.Service;
import java.util.regex.*;

import com.fasterxml.jackson.databind.JsonNode;
import com.server.server.model.PROTEIN;
import com.server.server.repository.ProteinRepositoryCustom;
import org.json.JSONArray;
import org.json.JSONObject;
import java.util.HashMap;


@Service
public class ProteinRepositoryImpl implements ProteinRepositoryCustom {

        @PersistenceContext
        private EntityManager em;
        String sessionID;
	public Connection conn;
        
       int map_size;
       
        public void processJQuery(List<List<String>> key_value_list, String id_json, Connection connection) throws SQLException{
          /* List<List<CriteriaQuery>> criteriaList = new ArrayList<>();
           sessionID=id_json;
           conn=connection;
	  System.out.println("Connection " + conn);
           System.out.println("Session_id :" + sessionID);
           map_size=key_value2.size();
           System.out.println("Map_size:" + map_size);
           //Set Up Criteria For Each Query
            for(int a = 0 ;a<key_value_list.size();a++) {
				  List<String> list_element=key_value_list.get(a);
				  List<CriteriaQuery> temp_criteria = new ArrayList<>();
				  for (Map.Entry<String, String> entry :list_element.entrySet()){
					  
					  String key=entry.getValue();
					  String value =entry.getKey();
					  
	*/


	 List<List<CriteriaQuery>> criteriaList = new ArrayList<>();
           sessionID=id_json;
           conn=connection;
	  System.out.println("Connection " + conn);
           System.out.println("Session_id :" + sessionID);
           map_size= key_value_list.size();
           System.out.println("Map_size:" + map_size);
           //Set Up Criteria For Each Query
            for(int a = 0 ;a< key_value_list.size();a++) {
				  List<String> list_element= key_value_list.get(a);
				  List<CriteriaQuery> temp_criteria = new ArrayList<>();
				  for (int b=0;b<list_element.size();b++){
					  String[] parts =list_element.get(b).split("=");
					  String key=parts[0];
					  String value =parts[1];
					  
					System.out.println("Key=" + key + " Value=" + value);

						Pattern pattern = Pattern.compile("(?i)(GO:[0]+|GO:)");
						Pattern pattern2 = Pattern.compile("(?i)(pf[0]+|pf)");
						Pattern pattern3 = Pattern.compile("(?i)(ipr[0]+|ipr)");
						Pattern pattern4 = Pattern.compile("(?i)(R-HSA-[0]+|R-HSA-)");
						Matcher matcher = pattern.matcher(value);
						Matcher matcher2 = pattern2.matcher(value);
						Matcher matcher3 = pattern3.matcher(value);
						Matcher matcher4 = pattern4.matcher(value);
						String regex_part = null;
						if (matcher.find())
						{
							regex_part=matcher.group();
							value=value.replace(regex_part, "");
						   
						}
						else if (matcher2.find())
						{
							regex_part=matcher2.group();
							value=value.replace(regex_part, "");
						   
						}
						
						else if (matcher3.find())
						{
							regex_part=matcher3.group();
							value=value.replace(regex_part, "");
						   
						}
						else if (matcher4.find())
						{
							regex_part=matcher4.group();
							value=value.replace(regex_part, "");
						   
						} 



						  String regex = "[0-9]+";
						  if(value.matches(regex)) {
							  int foo = Integer.parseInt(value);
							  
							  if(key.equals("disease_accession")) {
					            	CriteriaQuery cq =searchProteinbyDiseaseAcc (foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("disease_mim")) {
					            	CriteriaQuery cq =searchProteinbyDiseaseMim (foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("domain_iprid")) {
					            	CriteriaQuery cq =searchProteinbyDomainIpr_id(foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("disease_mim")) {
					            	CriteriaQuery cq =searchProteinbyDiseaseMim(foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("domain_pfam")) {
					            	CriteriaQuery cq =searchProteinbyDomainPfam(foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("publication_pmid")) {
					            	CriteriaQuery cq =searchProteinbyPublicationPmid(foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("pathway_id")) {
					            	CriteriaQuery cq =searchProteinbyPathwayId(foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("protein_isreviewed")) {
					            	CriteriaQuery cq =searchProteinbyProteinIs_reviewed(foo);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("protein_taxonid")) {
					            	CriteriaQuery cq =searchProteinbyProteinTaxon_id(foo);
					            	temp_criteria.add(cq);
					           }
							else if (key.equals("go_id")) {
					            	CriteriaQuery cq =searchProteinbyGo_termsTerm_id(foo);
					            	temp_criteria.add(cq);
					           }  
								criteriaList.add(a, temp_criteria);;
								System.out.println(criteriaList.get(a));
						  }
						  else {
						
						        if(key.equals("disease_acronym")) {
							System.out.println("Disease acronym");
			        	                CriteriaQuery cq =searchProteinbyDiseaseAcronym (value);
		        	            		temp_criteria.add(cq);
		        	               } 
							  else if (key.equals("disease_identifier")) {
					            	CriteriaQuery cq =searchProteinbyDiseaseIdentifier(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("goterms_name")) {
					            	CriteriaQuery cq =searchProteinbyGo_termsName(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("domain_name")) {
					            	CriteriaQuery cq =searchProteinbyDomainName(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("taxon_name")) {
					            	CriteriaQuery cq = searchProteinbyTaxonName(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("pdb_pdb")) {
					            	CriteriaQuery cq = searchProteinbyProtein_pdbPdb(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("pdb_chain")) {
					            	CriteriaQuery cq = searchProteinbyProtein_pdbChain(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("protein_name")) {
					            	CriteriaQuery cq = searchProteinbyProteinName(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("secondary_accession")) {
					            	CriteriaQuery cq = searchProteinbyPrimary_SecondarySecondaryAccession(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("publication_title")) {
					            	CriteriaQuery cq = searchProteinbyPublicationTitle(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("pathway_name")) {
					            	CriteriaQuery cq = searchProteinbyPathwayName(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("protein_accession")) {
					            	CriteriaQuery cq = searchProteinbyProteinAccession(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("protein_id")) {
					            	CriteriaQuery cq = searchProteinbyProteinId(value);
					            	temp_criteria.add(cq);
					           }
							  else if (key.equals("allergome")||key.equals("biocyc") || key.equals("biogrid") || 
									  key.equals("biomuta") || key.equals("chembl") || key.equals("dictybase")
									  || key.equals("drugbank") || key.equals("echobase") || key.equals("embl")
									  || key.equals("embl-cds") || key.equals("ensembl") || key.equals("ensemblgenome")
									  || key.equals("ensemblgenome_pro") || key.equals("ensemblgenome_trs") || key.equals("ensembl_pro")
									  || key.equals("ensembl_trs") || key.equals("flybase") || key.equals("genecards")
									  || key.equals("genedb") || key.equals("geneid") || key.equals("gene_name")
									  || key.equals("gene_orderedlocusname") || key.equals("gene_orfname") || key.equals("genereviews") 
									  || key.equals("gene_synonym") || key.equals("gi") || key.equals("hgnc")
									  || key.equals("kegg") || key.equals("orthodb") || key.equals("peroxibase")
									  || key.equals("pombase") || key.equals("rebase") || key.equals("refseq")
									  || key.equals("refseq_nt") || key.equals("rgd") || key.equals("sgd") 
									  || key.equals("string") || key.equals("unigene") || key.equals("uniparc")
									  || key.equals("unipathway") || key.equals("uniprotkb-id") || key.equals("uniref100") 
									  || key.equals("uniref50") || key.equals("uniref90") || key.equals("vectorbase")
									  || key.equals("wormbase") || key.equals("xenbase")
									  ) {
					            	CriteriaQuery cq = searchProteinbyProtein_crossrefTypeCrossref(key,value);
					            	temp_criteria.add(cq);
					            	
					           }
							  criteriaList.add(a, temp_criteria);
						  }
				  }
					  
					  
				//  System.out.println(criteriaList);
				  
			 }
            		
            		parseListOfList(criteriaList,conn);
            
              
        	 }
   
	int current_position=1;        
        public void parseListOfList(List<List<CriteriaQuery>> criteriaList, Connection conn) throws SQLException{
        	
        		
        		 for(int a = 0 ;a<map_size;a++) {
        			 
			 	  List<CriteriaQuery> cl =criteriaList.get(a);
        			  runCriteriaList(cl,a+1);
			 	  current_position++; 
			 }
        		 current_position=1;
        		 
        	}

        public void runCriteriaList(List<CriteriaQuery> cl,int query_number){
	        	int i = cl.size()-1;
	        List<Set<String>> returnList= new ArrayList<Set<String>>();    
	        while(i>-1) {
	         	CriteriaQuery cquery=cl.get(i);
		        List<String> result = em.createQuery(cquery).getResultList();
		  		Set<String> resultSet = new HashSet<>(result);
				returnList.add(resultSet);
		                i--;
	         }
	        processSetList("AND",returnList,query_number);  
             
        }
        
  

	 List<Set<String>> collect_lastset =new ArrayList<Set<String>>();
     public void processSetList(String OperationList , List<Set<String>> returnList,int query_number) {	   
	        Set<String> finalIntersectionSet = returnList.get(0);
	        Set<String> lastset = new HashSet<>();
	        //List<Set<String>> collect_lastset =new ArrayList<Set<String>>();
  	        OperationList="AND";
        	if(returnList.size()==1) {
                                lastset.addAll(finalIntersectionSet);
                         }
       		 for(int i=1;i<returnList.size();i++) {
       			 finalIntersectionSet.retainAll(returnList.get(i));
       			 lastset.addAll(finalIntersectionSet);
  		 }
       		 collect_lastset.add(lastset);                         
			 System.out.println("Collect_lastset: " + collect_lastset);
		System.out.println("Current_position=" + current_position);
	         if(current_position==map_size) {
				 createTempTable(sessionID,collect_lastset);
	       	 }
    			writeFile(lastset);
			System.out.println("LastSet" + " " + lastset);	
			 			     		
       	 }
        
        public void writeFile(Set<String> lastset) {
        		String fileName= "/home/ilayda/result.txt";
            try{  
                   PrintWriter outputStream = new PrintWriter(fileName);
                   outputStream.println("Result is :" + " " +lastset);
                   outputStream.close();     
            }
            catch(FileNotFoundException fnfe){
            	System.out.println(fnfe.getMessage());
            }
            // outputStream.close();
        }   


//        @Autowired
//		DataSource datasource;
		public void createTempTable(String session_ID, List<Set<String>> collect_lastset)  {
			System.out.println("Inside Test Method");
		    try {
		//    		Connection connection = conn;
		  //  		connection=datasource.getConnection();
		    System.out.println("In the method connection:" + conn);    
		 for(int group=1;group<=collect_lastset.size();group++) {
		        	 Statement stmt = conn.createStatement();	
			     String table_name = "protlist"+group+"_"+session_ID;
		        	 System.out.println(table_name);
		        	 String sql = "CREATE TEMPORARY TABLE " + table_name +
	                            "(ACCESSION VARCHAR(40) not NULL ," +
	                            "PRIMARY KEY my_pkey (ACCESSION))";
						  
		        System.out.println(sql);
		        stmt.executeUpdate(sql);
		        String insert_sql="INSERT INTO " +table_name +"(ACCESSION) VALUES(?)";
		        PreparedStatement ps = conn.prepareStatement(insert_sql);
				System.out.println(insert_sql);
				List<String> accession = new ArrayList<>();
				accession.addAll(collect_lastset.get(group-1));
			    System.out.println("Accession" + accession);
			    //BATCH
				for(String protein:accession){
					   ps.setString(1, protein);
				       ps.addBatch();
			    }
				ps.executeBatch();
				
				//CHECK TABLE AND ELEMENTS
				ResultSet rs = stmt.executeQuery("select * from " + table_name);
				 System.out.println("Table name:" + table_name);
				while(rs.next()) {
			          System.out.println(rs.getString("ACCESSION"));
				}
				        
					        	 
		     }
		     //Call Stored Procedure
		     callStoredProcedure(conn,map_size,"session_id");
		               
		    } catch (SQLException e) {
		        // TODO Auto-generated catch block
		        e.printStackTrace();
		    } catch(NullPointerException e){
		        System.out.println("Null Pointer exception");
		    }
		}
		public void callStoredProcedure2(Connection connection , int querynumber ,String session_id) throws SQLException {
		if(querynumber==1) {
			      CallableStatement gm_1set =connection.prepareCall("{ call GM_1SET(?) }");
			      gm_1set.setString(1,"sessionID");
			      gm_1set.execute();
		              System.out.println("Callable 1");  
			      ResultSet rs_gm_a = gm_1set.executeQuery("select * from GM_a_sessionID");
			      System.out.println("GM_1SET && GM_a_sessionID"); 
			while(rs_gm_a.next()) {
	                       System.out.println(rs_gm_a.getString("ONTOLOGY"));
	              }
			   
			//JOIN 
 CallableStatement gm_1set_join =connection.prepareCall("{ call 1SET_GM_a_(?) }");
	              gm_1set_join.setString(1, "sessionID");
	              gm_1set_join.execute(); 
	              ResultSet rs_gm_a_join =gm_1set_join.getResultSet();
	              while(rs_gm_a_join.next()) {
                      System.out.println("GO_ID: " + rs_gm_a_join.getString("GO_ID"));
                      System.out.println("NAME: " +rs_gm_a_join.getString("NAME"));
                      System.out.println("PARENTS: " +rs_gm_a_join.getString("PARENTS"));
                      System.out.println("DEPTH: " +rs_gm_a_join.getString("DEPTH"));
                      
             }   
	            //SET
		      CallableStatement gb_1set =connection.prepareCall("{ call GB_1SET(?) }");
	              gb_1set.setString(1, "sessionID");
	              gb_1set.execute();  
	              System.out.println("Callable 1");  
			      ResultSet rs_gb_a = gb_1set.executeQuery("select * from GB_a_sessionID");
			      System.out.println("GB_1SET && GB_a_sessionID"); 
	              while(rs_gb_a.next()) {
	                        System.out.println(rs_gb_a.getString("ONTOLOGY"));
	              }   
			//JOIN
 CallableStatement gb_1set_join =connection.prepareCall("{ call 1SET_GB_a_(?) }");
	              gb_1set_join.setString(1, "sessionID");
	              gb_1set_join.execute(); 
	             ResultSet rs_gb_a_join =gb_1set_join.getResultSet();
	              while(rs_gb_a_join.next()) {
                      System.out.println("GO_ID: " + rs_gb_a_join.getString("GO_ID"));
                      System.out.println("NAME: " +rs_gb_a_join.getString("NAME"));
                      System.out.println("PARENTS: " +rs_gb_a_join.getString("PARENTS"));
                      System.out.println("DEPTH: " +rs_gb_a_join.getString("DEPTH"));
                      
             }  
	              CallableStatement pw_1set =connection.prepareCall("{ call PW_1SET(?) }");
	              pw_1set.setString(1, "sessionID");
	              pw_1set.execute();  
	              System.out.println("Callable 1");  
			      ResultSet rs_pw_a = pw_1set.executeQuery("select * from PW_a_sessionID");
			      System.out.println("PW_1SET && PW_a_sessionID"); 
	              while(rs_pw_a.next()) {
	                        System.out.println(rs_pw_a.getString("PATHWAY"));
	              }  
	              CallableStatement dm_1set =connection.prepareCall("{ call DM_1SET(?) }");
	              dm_1set.setString(1, "sessionID");
	              dm_1set.execute();  
	              System.out.println("Callable 1");  
			      ResultSet rs_dm_a = dm_1set.executeQuery("select * from DM_a_sessionID");
			      System.out.println("DM_1SET && DM_a_sessionID"); 
	              while(rs_dm_a.next()) {
	                        System.out.println(rs_dm_a.getString("DOMAIN"));
	              } 
		}
			else if(querynumber==2) {
				  	System.out.println("Store procedure for 2 set");
				    
				  	//GM2SET
				    CallableStatement gm_2set=connection.prepareCall("{ call GM_2SET(?) }");
				    gm_2set.setString(1, "sessionID");
				    gm_2set.execute();  
                		ResultSet rs_gm_a = gm_2set.executeQuery("select * from GM_a_sessionID");
                		System.out.println("GM_2SET && GM_a_sessionID "); 
                		while(rs_gm_a.next()) {              
                       		        System.out.println(rs_gm_a.getString("ONTOLOGY"));
                		} 
                		ResultSet rs_gm_b = gm_2set.executeQuery("select * from GM_b_sessionID");
                		System.out.println("GM_2SET && GM_b_sessionID ");  
                		while(rs_gm_b.next()) {
                        		                          
                       		        System.out.println(rs_gm_b.getString("ONTOLOGY"));
                		} 
                		ResultSet rs_gm_c = gm_2set.executeQuery("select * from GM_c_sessionID");
                		System.out.println("GM_2SET && GM_c_sessionID "); 
                		while(rs_gm_c.next()) {                          
                       		        System.out.println(rs_gm_c.getString("ONTOLOGY"));
                		} 
                		
                		//GB2SET
                		CallableStatement gb_2set =connection.prepareCall("{ call GB_2SET(?) }");
  	                gb_2set.setString(1, "sessionID");
  	                gb_2set.execute();  
  	                System.out.println("Callable 2");  
  			        ResultSet rs_gb_a = gb_2set.executeQuery("select * from GB_a_sessionID");
  			        System.out.println("GB_2SET && GB_a_sessionID"); 
  	                while(rs_gb_a.next()) {
  	                        System.out.println(rs_gb_a.getString("ONTOLOGY"));
  	                }  
  	                ResultSet rs_gb_b = gb_2set.executeQuery("select * from GB_b_sessionID");
			        System.out.println("GB_2SET && GB_b_sessionID"); 
	                while(rs_gb_b.next()) {
	                        System.out.println(rs_gb_b.getString("ONTOLOGY"));
	                }  
	                ResultSet rs_gb_c = gb_2set.executeQuery("select * from GB_c_sessionID");
			        System.out.println("GB_2SET && GB_c_sessionID"); 
	                while(rs_gb_c.next()) {
	                        System.out.println(rs_gb_c.getString("ONTOLOGY"));
	                }  
	                
	                //PW2SET
	                CallableStatement pw_2set =connection.prepareCall("{ call PW_2SET(?) }");
	                pw_2set.setString(1, "sessionID");
	                pw_2set.execute();  
  	                System.out.println("Callable 2");  
  			        ResultSet rs_pw_a = pw_2set.executeQuery("select * from PW_a_sessionID");
  			        System.out.println("PW_2SET && PW_a_sessionID"); 
  	                while(rs_pw_a.next()) {
  	                        System.out.println(rs_pw_a.getString("PATHWAY"));
  	                }  
  	                ResultSet rs_pw_b = pw_2set.executeQuery("select * from PW_b_sessionID");
			        System.out.println("PW_2SET && PW_b_sessionID"); 
	                while(rs_pw_b.next()) {
	                        System.out.println(rs_pw_b.getString("PATHWAY"));
	                }  
	                ResultSet rs_pw_c = pw_2set.executeQuery("select * from PW_c_sessionID");
			        System.out.println("PW_2SET && PW_c_sessionID"); 
	                while(rs_pw_c.next()) {
	                        System.out.println(rs_pw_c.getString("PATHWAY"));
	                }  
	                
	                //DM2SET
	                CallableStatement dm_2set =connection.prepareCall("{ call DM_2SET(?) }");
		            dm_2set.setString(1, "sessionID");
		            dm_2set.execute();  
		            System.out.println("Callable 1");  
				    ResultSet rs_dm_a = dm_2set.executeQuery("select * from DM_a_sessionID");
				    System.out.println("DM_2SET && DM_a_sessionID"); 
		            while(rs_dm_a.next()) {
		                    System.out.println(rs_dm_a.getString("DOMAIN"));
		            }  
				    ResultSet rs_dm_b = dm_2set.executeQuery("select * from DM_b_sessionID");
				    System.out.println("DM_2SET && DM_b_sessionID"); 
		            while(rs_dm_b.next()) {
		                   System.out.println(rs_dm_b.getString("DOMAIN"));
		            }
		            ResultSet rs_dm_c = dm_2set.executeQuery("select * from DM_c_sessionID");
				    System.out.println("DM_2SET && DM_c_sessionID"); 
		            while(rs_dm_c.next()) {
		                   System.out.println(rs_dm_c.getString("DOMAIN"));
		            }  
		               
				
			}
		else if(querynumber==3) {
					System.out.println("Store procedure for 3 set");
				    //GM3SET
					CallableStatement gm_3set=connection.prepareCall("{ call GM_3SET(?) }");
					gm_3set.setString(1, "sessionID");
					gm_3set.execute();  
             		ResultSet rs_gm_a = gm_3set.executeQuery("select * from GM_a_sessionID");
             		System.out.println("GM_3SET && GM_a_sessionID "); 
             		while(rs_gm_a.next()) {              
                    		        System.out.println(rs_gm_a.getString("ONTOLOGY"));
             		} 
             		ResultSet rs_gm_b = gm_3set.executeQuery("select * from GM_b_sessionID");
             		System.out.println("GM_3SET && GM_b_sessionID ");  
             		while(rs_gm_b.next()) {
                     		                          
                    		        System.out.println(rs_gm_b.getString("ONTOLOGY"));
             		} 
             		ResultSet rs_gm_c = gm_3set.executeQuery("select * from GM_c_sessionID");
             		System.out.println("GM_3SET && GM_c_sessionID "); 
             		while(rs_gm_c.next()) {                          
                    		        System.out.println(rs_gm_c.getString("ONTOLOGY"));
             		} 
             		ResultSet rs_gm_d = gm_3set.executeQuery("select * from GM_d_sessionID");
             		System.out.println("GM_3SET && GM_d_sessionID "); 
             		while(rs_gm_d.next()) {                          
                    		        System.out.println(rs_gm_d.getString("ONTOLOGY"));
             		} 
             		ResultSet rs_gm_e = gm_3set.executeQuery("select * from GM_e_sessionID");
             		System.out.println("GM_3SET && GM_e_sessionID "); 
             		while(rs_gm_e.next()) {                          
                    		        System.out.println(rs_gm_e.getString("ONTOLOGY"));
             		} 
             		ResultSet rs_gm_f = gm_3set.executeQuery("select * from GM_f_sessionID");
             		System.out.println("GM_3SET && GM_f_sessionID "); 
             		while(rs_gm_f.next()) {                          
                    		        System.out.println(rs_gm_f.getString("ONTOLOGY"));
             		} 
             		ResultSet rs_gm_g = gm_3set.executeQuery("select * from GM_g_sessionID");
             		System.out.println("GM_3SET && GM_g_sessionID "); 
             		while(rs_gm_g.next()) {                          
                    		        System.out.println(rs_gm_g.getString("ONTOLOGY"));
             		} 
             		
             		//GB3SET
             		CallableStatement gb_3set =connection.prepareCall("{ call GB_3SET(?) }");
	                gb_3set.setString(1, "sessionID");
	                gb_3set.execute();  
	                System.out.println("Callable 2");  
			        ResultSet rs_gb_a = gb_3set.executeQuery("select * from GB_a_sessionID");
			        System.out.println("GB_3SET && GB_a_sessionID"); 
	                while(rs_gb_a.next()) {
	                        System.out.println(rs_gb_a.getString("ONTOLOGY"));
	                }  
	                ResultSet rs_gb_b = gb_3set.executeQuery("select * from GB_b_sessionID");
	                System.out.println("GB_3SET && GB_b_sessionID"); 
	                while(rs_gb_b.next()) {
                        System.out.println(rs_gb_b.getString("ONTOLOGY"));
	                }  
	                ResultSet rs_gb_c = gb_3set.executeQuery("select * from GB_c_sessionID");
	                System.out.println("GB_3SET && GB_c_sessionID"); 
	                while(rs_gb_c.next()) {
                        System.out.println(rs_gb_c.getString("ONTOLOGY"));
	                }
	                ResultSet rs_gb_d = gb_3set.executeQuery("select * from GB_d_sessionID");
	                System.out.println("GB_3SET && GB_d_sessionID"); 
	                while(rs_gb_d.next()) {
                        System.out.println(rs_gb_d.getString("ONTOLOGY"));
	                }
	                ResultSet rs_gb_e = gb_3set.executeQuery("select * from GB_e_sessionID");
	                System.out.println("GB_3SET && GB_e_sessionID"); 
	                while(rs_gb_e.next()) {
                        System.out.println(rs_gb_e.getString("ONTOLOGY"));
	                }
	                ResultSet rs_gb_f = gb_3set.executeQuery("select * from GB_f_sessionID");
	                System.out.println("GB_3SET && GB_f_sessionID"); 
	                while(rs_gb_f.next()) {
                        System.out.println(rs_gb_f.getString("ONTOLOGY"));
	                }
	                ResultSet rs_gb_g = gb_3set.executeQuery("select * from GB_g_sessionID");
	                System.out.println("GB_3SET && GB_g_sessionID"); 
	                while(rs_gb_g.next()) {
                        System.out.println(rs_gb_g.getString("ONTOLOGY"));
	                }	                
	                //PW3SET
	                
	                CallableStatement pw_3set =connection.prepareCall("{ call PW_3SET(?) }");
	                pw_3set.setString(1, "sessionID");
	                pw_3set.execute();  
  	                System.out.println("Callable 2");  
  			        ResultSet rs_pw_a = pw_3set.executeQuery("select * from PW_a_sessionID");
  			        System.out.println("PW_3SET && PW_a_sessionID"); 
  	                while(rs_pw_a.next()) {
  	                        System.out.println(rs_pw_a.getString("PATHWAY"));
  	                }  
  	                ResultSet rs_pw_b = pw_3set.executeQuery("select * from PW_b_sessionID");
			        System.out.println("PW_3SET && PW_b_sessionID"); 
	                while(rs_pw_b.next()) {
	                        System.out.println(rs_pw_b.getString("PATHWAY"));
	                }  
	                ResultSet rs_pw_c = pw_3set.executeQuery("select * from PW_c_sessionID");
			        System.out.println("PW_3SET && PW_c_sessionID"); 
	                while(rs_pw_c.next()) {
	                        System.out.println(rs_pw_c.getString("PATHWAY"));
	                } 
	                ResultSet rs_pw_d = pw_3set.executeQuery("select * from PW_d_sessionID");
			        System.out.println("PW_3SET && PW_d_sessionID"); 
	                while(rs_pw_d.next()) {
	                        System.out.println(rs_pw_d.getString("PATHWAY"));
	                } 
	                ResultSet rs_pw_e = pw_3set.executeQuery("select * from PW_e_sessionID");
			        System.out.println("PW_3SET && PW_e_sessionID"); 
	                while(rs_pw_e.next()) {
	                        System.out.println(rs_pw_e.getString("PATHWAY"));
	                } 
	                ResultSet rs_pw_f = pw_3set.executeQuery("select * from PW_f_sessionID");
			        System.out.println("PW_3SET && PW_f_sessionID"); 
	                while(rs_pw_f.next()) {
	                        System.out.println(rs_pw_f.getString("PATHWAY"));
	                } 
	                ResultSet rs_pw_g = pw_3set.executeQuery("select * from PW_g_sessionID");
			        System.out.println("PW_3SET && PW_g_sessionID"); 
	                while(rs_pw_g.next()) {
	                        System.out.println(rs_pw_g.getString("PATHWAY"));
	                } 
			
	                //DM3SET
	                CallableStatement dm_3set =connection.prepareCall("{ call DM_3SET(?) }");
		            dm_3set.setString(1, "sessionID");
		            dm_3set.execute();  
		            System.out.println("Callable 1");  
				    ResultSet rs_dm_a = dm_3set.executeQuery("select * from DM_a_sessionID");
				    System.out.println("DM_3SET && DM_a_sessionID"); 
		            while(rs_dm_a.next()) {
		                    System.out.println(rs_dm_a.getString("DOMAIN"));
		            }  
				    ResultSet rs_dm_b = dm_3set.executeQuery("select * from DM_b_sessionID");
				    System.out.println("DM_3SET && DM_b_sessionID"); 
		            while(rs_dm_b.next()) {
		                   System.out.println(rs_dm_b.getString("DOMAIN"));
		            }
		            ResultSet rs_dm_c = dm_3set.executeQuery("select * from DM_c_sessionID");
				    System.out.println("DM_3SET && DM_c_sessionID"); 
		            while(rs_dm_c.next()) {
		                   System.out.println(rs_dm_c.getString("DOMAIN"));
		            } 
		            ResultSet rs_dm_d = dm_3set.executeQuery("select * from DM_d_sessionID");
				    System.out.println("DM_3SET && DM_d_sessionID"); 
		            while(rs_dm_d.next()) {
		                   System.out.println(rs_dm_d.getString("DOMAIN"));
		            } 
		            ResultSet rs_dm_e = dm_3set.executeQuery("select * from DM_e_sessionID");
				    System.out.println("DM_3SET && DM_e_sessionID"); 
		            while(rs_dm_e.next()) {
		                   System.out.println(rs_dm_e.getString("DOMAIN"));
		            } 
		            ResultSet rs_dm_f = dm_3set.executeQuery("select * from DM_f_sessionID");
				    System.out.println("DM_3SET && DM_f_sessionID"); 
		            while(rs_dm_f.next()) {
		                   System.out.println(rs_dm_f.getString("DOMAIN"));
		            } 
		            ResultSet rs_dm_g = dm_3set.executeQuery("select * from DM_g_sessionID");
				    System.out.println("DM_3SET && DM_g_sessionID"); 
		            while(rs_dm_g.next()) {
		                   System.out.println(rs_dm_g.getString("DOMAIN"));
		            } 	
		}	
		else if(querynumber==4) {
			 	System.out.println("Store procedure for 4 set");
			    //GM4SET
			    CallableStatement gm_4set=connection.prepareCall("{ call GM_4SET(?) }");
			    gm_4set.setString(1, "sessionID");
			    gm_4set.execute();  
/*         		ResultSet rs_gm_a = gm_4set.executeQuery("select * from GM_a_sessionID");
         		System.out.println("GM_4SET && GM_a_sessionID "); 
         		while(rs_gm_a.next()) {              
                		        System.out.println(rs_gm_a.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_b = gm_4set.executeQuery("select * from GM_b_sessionID");
         		System.out.println("GM_4SET && GM_b_sessionID ");  
         		while(rs_gm_b.next()) {
                 		                          
                		        System.out.println(rs_gm_b.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_c = gm_4set.executeQuery("select * from GM_c_sessionID");
         		System.out.println("GM_4SET && GM_c_sessionID "); 
         		while(rs_gm_c.next()) {                          
                		        System.out.println(rs_gm_c.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_d = gm_4set.executeQuery("select * from GM_d_sessionID");
         		System.out.println("GM_4SET && GM_d_sessionID "); 
         		while(rs_gm_d.next()) {                          
                		        System.out.println(rs_gm_d.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_e = gm_4set.executeQuery("select * from GM_e_sessionID");
         		System.out.println("GM_4SET && GM_e_sessionID "); 
         		while(rs_gm_e.next()) {                          
                		        System.out.println(rs_gm_e.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_f = gm_4set.executeQuery("select * from GM_f_sessionID");
         		System.out.println("GM_4SET && GM_f_sessionID "); 
         		while(rs_gm_f.next()) {                          
                		        System.out.println(rs_gm_f.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_g = gm_4set.executeQuery("select * from GM_g_sessionID");
         		System.out.println("GM_4SET && GM_g_sessionID "); 
         		while(rs_gm_g.next()) {                          
                		        System.out.println(rs_gm_g.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_h = gm_4set.executeQuery("select * from GM_h_sessionID");
         		System.out.println("GM_4SET && GM_h_sessionID "); 
         		while(rs_gm_h.next()) {                          
                		        System.out.println(rs_gm_h.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_i = gm_4set.executeQuery("select * from GM_i_sessionID");
         		System.out.println("GM_4SET && GM_i_sessionID "); 
         		while(rs_gm_i.next()) {                          
                		        System.out.println(rs_gm_i.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_j = gm_4set.executeQuery("select * from GM_j_sessionID");
         		System.out.println("GM_4SET && GM_j_sessionID "); 
         		while(rs_gm_j.next()) {                          
                		        System.out.println(rs_gm_j.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_k = gm_4set.executeQuery("select * from GM_k_sessionID");
         		System.out.println("GM_4SET && GM_k_sessionID "); 
         		while(rs_gm_k.next()) {                          
                		        System.out.println(rs_gm_k.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_l = gm_4set.executeQuery("select * from GM_l_sessionID");
         		System.out.println("GM_4SET && GM_l_sessionID "); 
         		while(rs_gm_l.next()) {                          
                		        System.out.println(rs_gm_l.getString("ONTOLOGY"));
         		} 
  */       		ResultSet rs_gm_m = gm_4set.executeQuery("select * from GM_m_sessionID");
         		System.out.println("GM_4SET && GM_m_sessionID "); 
         		while(rs_gm_m.next()) {                          
                		        System.out.println(rs_gm_m.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_n = gm_4set.executeQuery("select * from GM_n_sessionID");
         		System.out.println("GM_4SET && GM_n_sessionID "); 
         		while(rs_gm_n.next()) {                          
                		        System.out.println(rs_gm_n.getString("ONTOLOGY"));
         		} 
         		ResultSet rs_gm_o = gm_4set.executeQuery("select * from GM_o_sessionID");
         		System.out.println("GM_4SET && GM_o_sessionID "); 
         		while(rs_gm_o.next()) {                          
                		        System.out.println(rs_gm_o.getString("ONTOLOGY"));
         		} 
         		
         		//GB4SET
         		CallableStatement gb_4set =connection.prepareCall("{ call GB_4SET(?) }");
                gb_4set.setString(1, "sessionID");
                gb_4set.execute();  
                System.out.println("Callable 2");  
/*		        ResultSet rs_gb_a = gb_4set.executeQuery("select * from GB_a_sessionID");
		        System.out.println("GB_4SET && GB_a_sessionID"); 
                while(rs_gb_a.next()) {
                        System.out.println(rs_gb_a.getString("ONTOLOGY"));
                }  
                ResultSet rs_gb_b = gb_4set.executeQuery("select * from GB_b_sessionID");
                System.out.println("GB_4SET && GB_b_sessionID"); 
                while(rs_gb_b.next()) {
                    System.out.println(rs_gb_b.getString("ONTOLOGY"));
                }  
                ResultSet rs_gb_c = gb_4set.executeQuery("select * from GB_c_sessionID");
                System.out.println("GB_4SET && GB_c_sessionID"); 
                while(rs_gb_c.next()) {
                    System.out.println(rs_gb_c.getString("ONTOLOGY"));
                }
                ResultSet rs_gb_d = gb_4set.executeQuery("select * from GB_d_sessionID");
                System.out.println("GB_4SET && GB_d_sessionID"); 
                while(rs_gb_d.next()) {
                    System.out.println(rs_gb_d.getString("ONTOLOGY"));
                }
                ResultSet rs_gb_e = gb_4set.executeQuery("select * from GB_e_sessionID");
                System.out.println("GB_4SET && GB_e_sessionID"); 
                while(rs_gb_e.next()) {
                    System.out.println(rs_gb_e.getString("ONTOLOGY"));
                }
                ResultSet rs_gb_f = gb_4set.executeQuery("select * from GB_f_sessionID");
                System.out.println("GB_4SET && GB_f_sessionID"); 
                while(rs_gb_f.next()) {
                    System.out.println(rs_gb_f.getString("ONTOLOGY"));
                }
                ResultSet rs_gb_g = gb_4set.executeQuery("select * from GB_g_sessionID");
                System.out.println("GB_4SET && GB_g_sessionID"); 
                while(rs_gb_g.next()) {
                    System.out.println(rs_gb_g.getString("ONTOLOGY"));
                }
                ResultSet rs_gb_h = gb_4set.executeQuery("select * from GB_h_sessionID");
                System.out.println("GB_4SET && GB_h_sessionID"); 
                while(rs_gb_h.next()) {
                    System.out.println(rs_gb_h.getString("ONTOLOGY"));
                }
                ResultSet rs_gb_i = gb_4set.executeQuery("select * from GB_i_sessionID");
                System.out.println("GB_4SET && GB_i_sessionID"); 
                while(rs_gb_i.next()) {
                    System.out.println(rs_gb_i.getString("ONTOLOGY"));
                }
                ResultSet rs_gb_j = gb_4set.executeQuery("select * from GB_j_sessionID");
                System.out.println("GB_4SET && GB_j_sessionID"); 
                while(rs_gb_j.next()) {
                    System.out.println(rs_gb_j.getString("ONTOLOGY"));
                }
                ResultSet rs_gb_k = gb_4set.executeQuery("select * from GB_k_sessionID");
                System.out.println("GB_4SET && GB_k_sessionID"); 
                while(rs_gb_k.next()) {
                    System.out.println(rs_gb_k.getString("ONTOLOGY"));
                }
                ResultSet rs_gb_l = gb_4set.executeQuery("select * from GB_l_sessionID");
                System.out.println("GB_4SET && GB_l_sessionID"); 
                while(rs_gb_l.next()) {
                    System.out.println(rs_gb_l.getString("ONTOLOGY"));
                }
  */              ResultSet rs_gb_m = gb_4set.executeQuery("select * from GB_m_sessionID");
                System.out.println("GB_4SET && GB_m_sessionID"); 
                while(rs_gb_m.next()) {
                    System.out.println(rs_gb_m.getString("ONTOLOGY"));
                }
                ResultSet rs_gb_n = gb_4set.executeQuery("select * from GB_n_sessionID");
                System.out.println("GB_4SET && GB_n_sessionID"); 
                while(rs_gb_n.next()) {
                    System.out.println(rs_gb_n.getString("ONTOLOGY"));
                }
                ResultSet rs_gb_o = gb_4set.executeQuery("select * from GB_o_sessionID");
                System.out.println("GB_4SET && GB_n_sessionID"); 
                while(rs_gb_o.next()) {
                    System.out.println(rs_gb_o.getString("ONTOLOGY"));
                }
                
              //PW4SET
                
                CallableStatement pw_4set =connection.prepareCall("{ call PW_4SET(?) }");
                pw_4set.setString(1, "sessionID");
                pw_4set.execute();  
                System.out.println("Callable 2");  
/*		        ResultSet rs_pw_a = pw_4set.executeQuery("select * from PW_a_sessionID");
		        System.out.println("PW_3SET && PW_a_sessionID"); 
                while(rs_pw_a.next()) {
                        System.out.println(rs_pw_a.getString("PATHWAY"));
                }  
                ResultSet rs_pw_b = pw_4set.executeQuery("select * from PW_b_sessionID");
		        System.out.println("PW_4SET && PW_b_sessionID"); 
                while(rs_pw_b.next()) {
                        System.out.println(rs_pw_b.getString("PATHWAY"));
                }  
                ResultSet rs_pw_c = pw_4set.executeQuery("select * from PW_c_sessionID");
		        System.out.println("PW_4SET && PW_c_sessionID"); 
                while(rs_pw_c.next()) {
                        System.out.println(rs_pw_c.getString("PATHWAY"));
                } 
                ResultSet rs_pw_d = pw_4set.executeQuery("select * from PW_d_sessionID");
		        System.out.println("PW_4SET && PW_d_sessionID"); 
                while(rs_pw_d.next()) {
                        System.out.println(rs_pw_d.getString("PATHWAY"));
                } 
                ResultSet rs_pw_e = pw_4set.executeQuery("select * from PW_e_sessionID");
		        System.out.println("PW_4SET && PW_e_sessionID"); 
                while(rs_pw_e.next()) {
                        System.out.println(rs_pw_e.getString("PATHWAY"));
                } 
                ResultSet rs_pw_f = pw_4set.executeQuery("select * from PW_f_sessionID");
		        System.out.println("PW_4SET && PW_f_sessionID"); 
                while(rs_pw_f.next()) {
                        System.out.println(rs_pw_f.getString("PATHWAY"));
                } 
                ResultSet rs_pw_g = pw_4set.executeQuery("select * from PW_g_sessionID");
		        System.out.println("PW_4SET && PW_g_sessionID"); 
                while(rs_pw_g.next()) {
                        System.out.println(rs_pw_g.getString("PATHWAY"));
                } 
                ResultSet rs_pw_h = pw_4set.executeQuery("select * from PW_h_sessionID");
		        System.out.println("PW_4SET && PW_h_sessionID"); 
                while(rs_pw_h.next()) {
                        System.out.println(rs_pw_h.getString("PATHWAY"));
                } 
                ResultSet rs_pw_i = pw_4set.executeQuery("select * from PW_i_sessionID");
		        System.out.println("PW_4SET && PW_i_sessionID"); 
                while(rs_pw_i.next()) {
                        System.out.println(rs_pw_i.getString("PATHWAY"));
                } 
                ResultSet rs_pw_j = pw_4set.executeQuery("select * from PW_j_sessionID");
		        System.out.println("PW_4SET && PW_j_sessionID"); 
                while(rs_pw_j.next()) {
                        System.out.println(rs_pw_j.getString("PATHWAY"));
                } 
                ResultSet rs_pw_k = pw_4set.executeQuery("select * from PW_k_sessionID");
		        System.out.println("PW_4SET && PW_k_sessionID"); 
                while(rs_pw_k.next()) {
                        System.out.println(rs_pw_k.getString("PATHWAY"));
                } 
                ResultSet rs_pw_l = pw_4set.executeQuery("select * from PW_l_sessionID");
		        System.out.println("PW_4SET && PW_l_sessionID"); 
                while(rs_pw_l.next()) {
                        System.out.println(rs_pw_l.getString("PATHWAY"));
                } 
  */              ResultSet rs_pw_m = pw_4set.executeQuery("select * from PW_m_sessionID");
		        System.out.println("PW_4SET && PW_m_sessionID"); 
                while(rs_pw_m.next()) {
                        System.out.println(rs_pw_m.getString("PATHWAY"));
                } 
                ResultSet rs_pw_n = pw_4set.executeQuery("select * from PW_n_sessionID");
		        System.out.println("PW_4SET && PW_n_sessionID"); 
                while(rs_pw_n.next()) {
                        System.out.println(rs_pw_n.getString("PATHWAY"));
                } 
                ResultSet rs_pw_o = pw_4set.executeQuery("select * from PW_o_sessionID");
		        System.out.println("PW_4SET && PW_o_sessionID"); 
                while(rs_pw_o.next()) {
                        System.out.println(rs_pw_o.getString("PATHWAY"));
                } 
                //DM4SET
                CallableStatement dm_4set =connection.prepareCall("{ call DM_4SET(?) }");
	            dm_4set.setString(1, "sessionID");
	            dm_4set.execute();  
	            System.out.println("Callable 1");  
/*			    ResultSet rs_dm_a = dm_4set.executeQuery("select * from DM_a_sessionID");
			    System.out.println("DM_4SET && DM_a_sessionID"); 
	            while(rs_dm_a.next()) {
	                    System.out.println(rs_dm_a.getString("DOMAIN"));
	            }  
			    ResultSet rs_dm_b = dm_4set.executeQuery("select * from DM_b_sessionID");
			    System.out.println("DM_4SET && DM_b_sessionID"); 
	            while(rs_dm_b.next()) {
	                   System.out.println(rs_dm_b.getString("DOMAIN"));
	            }
	            ResultSet rs_dm_c = dm_4set.executeQuery("select * from DM_c_sessionID");
			    System.out.println("DM_4SET && DM_c_sessionID"); 
	            while(rs_dm_c.next()) {
	                   System.out.println(rs_dm_c.getString("DOMAIN"));
	            } 
	            ResultSet rs_dm_d = dm_4set.executeQuery("select * from DM_d_sessionID");
			    System.out.println("DM_4SET && DM_d_sessionID"); 
	            while(rs_dm_d.next()) {
	                   System.out.println(rs_dm_d.getString("DOMAIN"));
	            } 
	            ResultSet rs_dm_e = dm_4set.executeQuery("select * from DM_e_sessionID");
			    System.out.println("DM_4SET && DM_e_sessionID"); 
	            while(rs_dm_e.next()) {
	                   System.out.println(rs_dm_e.getString("DOMAIN"));
	            } 
	            ResultSet rs_dm_f = dm_4set.executeQuery("select * from DM_f_sessionID");
			    System.out.println("DM_4SET && DM_f_sessionID"); 
	            while(rs_dm_f.next()) {
	                   System.out.println(rs_dm_f.getString("DOMAIN"));
	            } 
	            ResultSet rs_dm_g = dm_4set.executeQuery("select * from DM_g_sessionID");
			    System.out.println("DM_3SET && DM_g_sessionID"); 
	            while(rs_dm_g.next()) {
	                   System.out.println(rs_dm_g.getString("DOMAIN"));
	            } 
	            ResultSet rs_dm_h = dm_4set.executeQuery("select * from DM_h_sessionID");
			    System.out.println("DM_4SET && DM_h_sessionID"); 
	            while(rs_dm_h.next()) {
	                   System.out.println(rs_dm_h.getString("DOMAIN"));
	            } 
	            ResultSet rs_dm_i = dm_4set.executeQuery("select * from DM_i_sessionID");
			    System.out.println("DM_4SET && DM_i_sessionID"); 
	            while(rs_dm_i.next()) {
	                   System.out.println(rs_dm_i.getString("DOMAIN"));
	            } 
	            ResultSet rs_dm_j = dm_4set.executeQuery("select * from DM_j_sessionID");
			    System.out.println("DM_4SET && DM_j_sessionID"); 
	            while(rs_dm_j.next()) {
	                   System.out.println(rs_dm_j.getString("DOMAIN"));
	            } 
	            ResultSet rs_dm_k = dm_4set.executeQuery("select * from DM_k_sessionID");
			    System.out.println("DM_4SET && DM_k_sessionID"); 
	            while(rs_dm_k.next()) {
	                   System.out.println(rs_dm_k.getString("DOMAIN"));
	            } 
	            ResultSet rs_dm_l = dm_4set.executeQuery("select * from DM_l_sessionID");
			    System.out.println("DM_4SET && DM_l_sessionID"); 
	            while(rs_dm_l.next()) {
	                   System.out.println(rs_dm_l.getString("DOMAIN"));
	            } 
*/	            ResultSet rs_dm_m = dm_4set.executeQuery("select * from DM_m_sessionID");
			    System.out.println("DM_4SET && DM_m_sessionID"); 
	            while(rs_dm_m.next()) {
	                   System.out.println(rs_dm_m.getString("DOMAIN"));
	            } 
	            ResultSet rs_dm_n = dm_4set.executeQuery("select * from DM_n_sessionID");
			    System.out.println("DM_4SET && DM_n_sessionID"); 
	            while(rs_dm_n.next()) {
	                   System.out.println(rs_dm_n.getString("DOMAIN"));
	            } 
	            ResultSet rs_dm_o = dm_4set.executeQuery("select * from DM_o_sessionID");
			    System.out.println("DM_4SET && DM_o_sessionID"); 
	            while(rs_dm_o.next()) {
	                   System.out.println(rs_dm_o.getString("DOMAIN"));
	            } 

                
                
		}
	}
		
		public void callStoredProcedure(Connection connection , int querynumber ,String session_id) throws SQLException {

	if(querynumber==1) {
					//SET
			      CallableStatement gm_1set =connection.prepareCall("{ call GM_1SET(?) }");
			      gm_1set.setString(1, sessionID);
			      gm_1set.execute();  
	               ResultSet rs_gm_a = gm_1set.executeQuery("select * from GM_a_"+sessionID);
			      System.out.println("GM_1SET && GM_a_"+sessionID); 
	              while(rs_gm_a.next()) {
	                       System.out.println(rs_gm_a.getString("ONTOLOGY"));
	              }  
/*			    //JOIN
			     CallableStatement gm_1set_join =connection.prepareCall("{ call 1SET_GM_a_(?) }");
	              gm_1set_join.setString(1, sessionID);
	              gm_1set_join.execute(); 
	             ResultSet rs_gm_a_join =gm_1set_join.getResultSet();
			//System.out.println("RESULT SET FOR ONE QUERY" +rs_gm_a_join );
	              while(rs_gm_a_join.next()) {
                     System.out.println("GO_ID: " + rs_gm_a_join.getString("GO_ID"));
                      System.out.println("NAME: " +rs_gm_a_join.getString("NAME"));
                      System.out.println("PARENTS: " +rs_gm_a_join.getString("PARENTS"));
                      System.out.println("DEPTH: " +rs_gm_a_join.getString("DEPTH"));
	              }  
	              //SET
*/	              CallableStatement gb_1set =connection.prepareCall("{ call GB_1SET(?) }");
	              gb_1set.setString(1, sessionID);
	              gb_1set.execute();  
	              ResultSet rs_gb_a = gb_1set.executeQuery("select * from GB_a_"+sessionID);
			      System.out.println("GB_1SET && GB_a_sessionID"); 
	              while(rs_gb_a.next()) {
	                        System.out.println(rs_gb_a.getString("ONTOLOGY"));
	              }   
	              //JOIN
/*	              CallableStatement gb_1set_join =connection.prepareCall("{ call 1SET_GB_a_(?) }");
	              gb_1set_join.setString(1, sessionID);
	              gb_1set_join.execute(); 
	             ResultSet rs_gb_a_join =gb_1set_join.getResultSet();
	              while(rs_gb_a_join.next()) {
                      System.out.println("GO_ID: " + rs_gb_a_join.getString("GO_ID"));
                      System.out.println("NAME: " +rs_gb_a_join.getString("NAME"));
                      System.out.println("PARENTS: " +rs_gb_a_join.getString("PARENTS"));
                      System.out.println("DEPTH: " +rs_gb_a_join.getString("DEPTH"));
                   }  
	              //SET
*/	              CallableStatement pw_1set =connection.prepareCall("{ call PW_1SET(?) }");
	              pw_1set.setString(1, sessionID);
	              pw_1set.execute();  
	              System.out.println("Callable 1");  
			      ResultSet rs_pw_a = pw_1set.executeQuery("select * from PW_a_"+sessionID);
			      System.out.println("PW_1SET && PW_a_sessionID"); 
	              while(rs_pw_a.next()) {
	                        System.out.println(rs_pw_a.getString("PATHWAY"));
	              }  
	              //JOIN
/*	              CallableStatement pw_1set_join =connection.prepareCall("{ call 1SET_PW_a_(?) }");
	              pw_1set_join.setString(1, sessionID);
	              pw_1set_join.execute(); 
	             ResultSet rs_pw_a_join =pw_1set_join.getResultSet();
	              while(rs_pw_a_join.next()) {
                      System.out.println("IPR_ID: " + rs_pw_a_join.getString("IPR_ID"));
                      System.out.println("NAME: " +rs_pw_a_join.getString("NAME"));
                      System.out.println("PARENTS: " +rs_pw_a_join.getString("PARENTS"));
                  }  
	              //SET
*/	              CallableStatement dm_1set =connection.prepareCall("{ call DM_1SET(?) }");
	              dm_1set.setString(1, sessionID);
	              dm_1set.execute();  
	              System.out.println("Callable 1");  
			      ResultSet rs_dm_a = dm_1set.executeQuery("select * from DM_a_"+sessionID);
			      System.out.println("DM_1SET && DM_a_sessionID"); 
	              while(rs_dm_a.next()) {
	                        System.out.println(rs_dm_a.getString("DOMAIN"));
	              }
	              //JOIN
/*	              CallableStatement dm_1set_join =connection.prepareCall("{ call 1SET_DM_a_(?) }");
	              dm_1set_join.setString(1, sessionID);
	              dm_1set_join.execute(); 
	             ResultSet rs_dm_a_join =dm_1set_join.getResultSet();
	              while(rs_dm_a_join.next()) {
                      System.out.println("IPR: " + rs_dm_a_join.getString("IPR"));
                      System.out.println("NAME: " +rs_dm_a_join.getString("NAME"));
                      System.out.println("PARENTS: " +rs_dm_a_join.getString("PARENTS"));
                  }  
*/	              
			callJoinFunction(conn); 
		}
			else if(querynumber==2) {
				  	System.out.println("Store procedure for 2 set");
				    
				  	//GM2SET
				  	//SET
				    CallableStatement gm_2set=connection.prepareCall("{ call GM_2SET(?) }");
				    gm_2set.setString(1, sessionID);
				    gm_2set.execute();  
                		ResultSet rs_gm_a = gm_2set.executeQuery("select * from GM_a_"+sessionID);
                		System.out.println("GM_2SET && GM_a_sessionID "); 
                		while(rs_gm_a.next()) {              
                       		        System.out.println(rs_gm_a.getString("ONTOLOGY"));
                		} 
                		 //JOIN
       			     CallableStatement gm_2set_a_join =connection.prepareCall("{ call 2SET_GM_a_(?) }");
       	              gm_2set_a_join.setString(1, sessionID);
       	              gm_2set_a_join.execute(); 
       	             ResultSet rs_gm_a_join =gm_2set_a_join.getResultSet();
       	              while(rs_gm_a_join.next()) {
                             System.out.println("GO_ID: " + rs_gm_a_join.getString("GO_ID"));
                             System.out.println("NAME: " +rs_gm_a_join.getString("NAME"));
                             System.out.println("PARENTS: " +rs_gm_a_join.getString("PARENTS"));
                             System.out.println("DEPTH: " +rs_gm_a_join.getString("DEPTH"));
       	              }  
       	            //SET
       	             ResultSet rs_gm_b = gm_2set.executeQuery("select * from GM_b_"+sessionID);
                		System.out.println("GM_2SET && GM_b_sessionID ");  
                		while(rs_gm_b.next()) {
                        	 System.out.println(rs_gm_b.getString("ONTOLOGY"));
                		} 
                		 //JOIN
          			     CallableStatement gm_2set_b_join =connection.prepareCall("{ call 2SET_GM_b_(?) }");
          	              gm_2set_b_join.setString(1, sessionID);
          	              gm_2set_b_join.execute(); 
          	             ResultSet rs_gm_b_join =gm_2set_b_join.getResultSet();
          	              while(rs_gm_b_join.next()) {
                                System.out.println("GO_ID: " + rs_gm_b_join.getString("GO_ID"));
                                System.out.println("NAME: " +rs_gm_b_join.getString("NAME"));
                                System.out.println("PARENTS: " +rs_gm_b_join.getString("PARENTS"));
                                System.out.println("DEPTH: " +rs_gm_b_join.getString("DEPTH"));
          	              }  
                		//SET
                		ResultSet rs_gm_c = gm_2set.executeQuery("select * from GM_c_"+sessionID);
                		System.out.println("GM_2SET && GM_c_sessionID "); 
                		while(rs_gm_c.next()) {                          
                       		        System.out.println(rs_gm_c.getString("ONTOLOGY"));
                		} 
                		 //JOIN
         			     CallableStatement gm_2set_c_join =connection.prepareCall("{ call 2SET_GM_c_(?) }");
         	              gm_2set_c_join.setString(1, sessionID);
         	              gm_2set_c_join.execute(); 
         	             ResultSet rs_gm_c_join =gm_2set_c_join.getResultSet();
         	              while(rs_gm_c_join.next()) {
                               System.out.println("GO_ID: " + rs_gm_c_join.getString("GO_ID"));
                               System.out.println("NAME: " +rs_gm_c_join.getString("NAME"));
                               System.out.println("PARENTS: " +rs_gm_c_join.getString("PARENTS"));
                               System.out.println("DEPTH: " +rs_gm_c_join.getString("DEPTH"));
         	              }  
                		
                		//GB2SET
         	        //SET
                		CallableStatement gb_2set =connection.prepareCall("{ call GB_2SET(?) }");
  	                gb_2set.setString(1, sessionID);
  	                gb_2set.execute();  
  	                System.out.println("Callable 2");  
  			        ResultSet rs_gb_a = gb_2set.executeQuery("select * from GB_a_"+sessionID);
  			        System.out.println("GB_2SET && GB_a_sessionID"); 
  	                while(rs_gb_a.next()) {
  	                        System.out.println(rs_gb_a.getString("ONTOLOGY"));
  	                }  
  	              //JOIN
	    			     CallableStatement gb_2set_a_join =connection.prepareCall("{ call 2SET_GB_a_(?) }");
	    	             gb_2set_a_join.setString(1, sessionID);
	    	              gb_2set_a_join.execute(); 
	    	             ResultSet rs_gb_a_join =gb_2set_a_join.getResultSet();
    	              while(rs_gb_a_join.next()) {
                          System.out.println("GO_ID: " + rs_gb_a_join.getString("GO_ID"));
                          System.out.println("NAME: " +rs_gb_a_join.getString("NAME"));
                          System.out.println("PARENTS: " +rs_gb_a_join.getString("PARENTS"));
                          System.out.println("DEPTH: " +rs_gb_a_join.getString("DEPTH"));
    	              } 
    	              //SET
  	                ResultSet rs_gb_b = gb_2set.executeQuery("select * from GB_b_"+sessionID);
			        System.out.println("GB_2SET && GB_b_sessionID"); 
	                while(rs_gb_b.next()) {
	                        System.out.println(rs_gb_b.getString("ONTOLOGY"));
	                }  
	              //JOIN
   			     CallableStatement gb_2set_b_join =connection.prepareCall("{ call 2SET_GB_b_(?) }");
   	             gb_2set_b_join.setString(1, sessionID);
   	              gb_2set_b_join.execute(); 
   	             ResultSet rs_gb_b_join =gb_2set_b_join.getResultSet();
	              while(rs_gb_b_join.next()) {
                     System.out.println("GO_ID: " + rs_gb_b_join.getString("GO_ID"));
                     System.out.println("NAME: " +rs_gb_b_join.getString("NAME"));
                     System.out.println("PARENTS: " +rs_gb_b_join.getString("PARENTS"));
                     System.out.println("DEPTH: " +rs_gb_b_join.getString("DEPTH"));
	              } 
	              //SET
	                ResultSet rs_gb_c = gb_2set.executeQuery("select * from GB_c_"+sessionID);
			        System.out.println("GB_2SET && GB_c_sessionID"); 
	                while(rs_gb_c.next()) {
	                        System.out.println(rs_gb_c.getString("ONTOLOGY"));
	                }  
	               //JOIN
	                CallableStatement gb_2set_c_join =connection.prepareCall("{ call 2SET_GB_c_(?) }");
	   	             gb_2set_c_join.setString(1, sessionID);
	   	              gb_2set_c_join.execute(); 
	   	             ResultSet rs_gb_c_join =gb_2set_c_join.getResultSet();
		              while(rs_gb_c_join.next()) {
	                     System.out.println("GO_ID: " + rs_gb_c_join.getString("GO_ID"));
	                     System.out.println("NAME: " +rs_gb_c_join.getString("NAME"));
	                     System.out.println("PARENTS: " +rs_gb_c_join.getString("PARENTS"));
	                     System.out.println("DEPTH: " +rs_gb_c_join.getString("DEPTH"));
		              } 
	                
	                //PW2SET
		            //SET
	                CallableStatement pw_2set =connection.prepareCall("{ call PW_2SET(?) }");
	                pw_2set.setString(1, sessionID);
	                pw_2set.execute();  
  	                System.out.println("Callable 2");  
  			        ResultSet rs_pw_a = pw_2set.executeQuery("select * from PW_a_"+sessionID);
  			        System.out.println("PW_2SET && PW_a_sessionID"); 
  	                while(rs_pw_a.next()) {
  	                        System.out.println(rs_pw_a.getString("PATHWAY"));
  	                }  
  	                //JOIN
  	              CallableStatement pw_2set_a_join =connection.prepareCall("{ call 2SET_PW_a_(?) }");
	              pw_2set_a_join.setString(1, sessionID);
	              pw_2set_a_join.execute(); 
	             ResultSet rs_pw_a_join =pw_2set_a_join.getResultSet();
	              while(rs_pw_a_join.next()) {
                      System.out.println("IPR_ID: " + rs_pw_a_join.getString("IPR_ID"));
                      System.out.println("NAME: " +rs_pw_a_join.getString("NAME"));
                      System.out.println("PARENTS: " +rs_pw_a_join.getString("PARENTS"));
                  }  
	              //SET
  	                ResultSet rs_pw_b = pw_2set.executeQuery("select * from PW_b_"+sessionID);
			        System.out.println("PW_2SET && PW_b_sessionID"); 
	                while(rs_pw_b.next()) {
	                        System.out.println(rs_pw_b.getString("PATHWAY"));
	                } 
	                //JOIN
	  	              CallableStatement pw_2set_b_join =connection.prepareCall("{ call 2SET_PW_b_(?) }");
		              pw_2set_b_join.setString(1, sessionID);
		              pw_2set_b_join.execute(); 
		             ResultSet rs_pw_b_join =pw_2set_b_join.getResultSet();
		              while(rs_pw_b_join.next()) {
	                      System.out.println("IPR_ID: " + rs_pw_b_join.getString("IPR_ID"));
	                      System.out.println("NAME: " +rs_pw_b_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_pw_b_join.getString("PARENTS"));
	                  }  
		              //SET
	                ResultSet rs_pw_c = pw_2set.executeQuery("select * from PW_c_"+sessionID);
			        System.out.println("PW_2SET && PW_c_sessionID"); 
	                while(rs_pw_c.next()) {
	                        System.out.println(rs_pw_c.getString("PATHWAY"));
	                }  
	                //JOIN
	  	              CallableStatement pw_2set_c_join =connection.prepareCall("{ call 2SET_PW_c_(?) }");
		              pw_2set_c_join.setString(1, sessionID);
		              pw_2set_c_join.execute(); 
		             ResultSet rs_pw_c_join =pw_2set_c_join.getResultSet();
		              while(rs_pw_c_join.next()) {
	                      System.out.println("IPR_ID: " + rs_pw_c_join.getString("IPR_ID"));
	                      System.out.println("NAME: " +rs_pw_c_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_pw_c_join.getString("PARENTS"));
	                  }  
	                
	                //DM2SET
		            //SET
	                CallableStatement dm_2set =connection.prepareCall("{ call DM_2SET(?) }");
		            dm_2set.setString(1, sessionID);
		            dm_2set.execute();  
		            System.out.println("Callable 1");  
				    ResultSet rs_dm_a = dm_2set.executeQuery("select * from DM_a_"+sessionID);
				    System.out.println("DM_2SET && DM_a_sessionID"); 
		            while(rs_dm_a.next()) {
		                    System.out.println(rs_dm_a.getString("DOMAIN"));
		            }  
		            //JOIN
		              CallableStatement dm_2set_a_join =connection.prepareCall("{ call 2SET_DM_a_(?) }");
		              dm_2set_a_join.setString(1, sessionID);
		              dm_2set_a_join.execute(); 
		             ResultSet rs_dm_a_join =dm_2set_a_join.getResultSet();
		              while(rs_dm_a_join.next()) {
	                      System.out.println("IPR: " + rs_dm_a_join.getString("IPR"));
	                      System.out.println("NAME: " +rs_dm_a_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_dm_a_join.getString("PARENTS"));
	                  }  
		            //SET
				    ResultSet rs_dm_b = dm_2set.executeQuery("select * from DM_b_"+sessionID);
				    System.out.println("DM_2SET && DM_b_sessionID"); 
		            while(rs_dm_b.next()) {
		                   System.out.println(rs_dm_b.getString("DOMAIN"));
		            }
		          //JOIN
		              CallableStatement dm_2set_b_join =connection.prepareCall("{ call 2SET_DM_b_(?) }");
		              dm_2set_b_join.setString(1, sessionID);
		              dm_2set_b_join.execute(); 
		             ResultSet rs_dm_b_join =dm_2set_b_join.getResultSet();
		              while(rs_dm_b_join.next()) {
	                      System.out.println("IPR: " + rs_dm_b_join.getString("IPR"));
	                      System.out.println("NAME: " +rs_dm_b_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_dm_b_join.getString("PARENTS"));
	                  }  
		              //SET
		            ResultSet rs_dm_c = dm_2set.executeQuery("select * from DM_c_"+sessionID);
				    System.out.println("DM_2SET && DM_c_sessionID"); 
		            while(rs_dm_c.next()) {
		                   System.out.println(rs_dm_c.getString("DOMAIN"));
		            }  
		          //JOIN
		              CallableStatement dm_2set_c_join =connection.prepareCall("{ call 2SET_DM_c_(?) }");
		              dm_2set_c_join.setString(1, sessionID);
		              dm_2set_c_join.execute(); 
		             ResultSet rs_dm_c_join =dm_2set_c_join.getResultSet();
		              while(rs_dm_c_join.next()) {
	                      System.out.println("IPR: " + rs_dm_c_join.getString("IPR"));
	                      System.out.println("NAME: " +rs_dm_c_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_dm_c_join.getString("PARENTS"));
	                  }  
		               
				
			}
			else if(querynumber==3) {
					System.out.println("Store procedure for 3 set");
				    //GM3SET
					//SET
					CallableStatement gm_3set=connection.prepareCall("{ call GM_3SET(?) }");
					gm_3set.setString(1, sessionID);
					gm_3set.execute();  
             		ResultSet rs_gm_a = gm_3set.executeQuery("select * from GM_a_"+sessionID);
             		System.out.println("GM_3SET && GM_a_sessionID "); 
             		while(rs_gm_a.next()) {              
                    		        System.out.println(rs_gm_a.getString("ONTOLOGY"));
             		} 
             		 //JOIN
      			     CallableStatement gm_3set_a_join =connection.prepareCall("{ call 3SET_GM_a_(?) }");
      	              gm_3set_a_join.setString(1, sessionID);
      	              gm_3set_a_join.execute(); 
      	             ResultSet rs_gm_a_join =gm_3set_a_join.getResultSet();
      	              while(rs_gm_a_join.next()) {
                            System.out.println("GO_ID: " + rs_gm_a_join.getString("GO_ID"));
                            System.out.println("NAME: " +rs_gm_a_join.getString("NAME"));
                            System.out.println("PARENTS: " +rs_gm_a_join.getString("PARENTS"));
                            System.out.println("DEPTH: " +rs_gm_a_join.getString("DEPTH"));
      	              }  
      	              //SET
             		ResultSet rs_gm_b = gm_3set.executeQuery("select * from GM_b_"+sessionID);
             		System.out.println("GM_3SET && GM_b_sessionID ");  
             		while(rs_gm_b.next()) {
                     		                          
                    		        System.out.println(rs_gm_b.getString("ONTOLOGY"));
             		} 
             		 //JOIN
     			     CallableStatement gm_3set_b_join =connection.prepareCall("{ call 3SET_GM_b_(?) }");
     	              gm_3set_b_join.setString(1, sessionID);
     	              gm_3set_b_join.execute(); 
     	             ResultSet rs_gm_b_join =gm_3set_b_join.getResultSet();
     	              while(rs_gm_b_join.next()) {
                           System.out.println("GO_ID: " + rs_gm_b_join.getString("GO_ID"));
                           System.out.println("NAME: " +rs_gm_b_join.getString("NAME"));
                           System.out.println("PARENTS: " +rs_gm_b_join.getString("PARENTS"));
                           System.out.println("DEPTH: " +rs_gm_b_join.getString("DEPTH"));
     	              }  
     	              //SET
             		ResultSet rs_gm_c = gm_3set.executeQuery("select * from GM_c_"+sessionID);
             		System.out.println("GM_3SET && GM_c_sessionID "); 
             		while(rs_gm_c.next()) {                          
                    		        System.out.println(rs_gm_c.getString("ONTOLOGY"));
             		} 
             		 //JOIN
    			     CallableStatement gm_3set_c_join =connection.prepareCall("{ call 3SET_GM_c_(?) }");
    	              gm_3set_c_join.setString(1, sessionID);
    	              gm_3set_c_join.execute(); 
    	             ResultSet rs_gm_c_join =gm_3set_c_join.getResultSet();
    	              while(rs_gm_c_join.next()) {
                          System.out.println("GO_ID: " + rs_gm_c_join.getString("GO_ID"));
                          System.out.println("NAME: " +rs_gm_c_join.getString("NAME"));
                          System.out.println("PARENTS: " +rs_gm_c_join.getString("PARENTS"));
                          System.out.println("DEPTH: " +rs_gm_c_join.getString("DEPTH"));
    	              } 
    	              //SET
             		ResultSet rs_gm_d = gm_3set.executeQuery("select * from GM_d_"+sessionID);
             		System.out.println("GM_3SET && GM_d_sessionID "); 
             		while(rs_gm_d.next()) {                          
                    		        System.out.println(rs_gm_d.getString("ONTOLOGY"));
             		} 
             		 //JOIN
   			     CallableStatement gm_3set_d_join =connection.prepareCall("{ call 3SET_GM_d_(?) }");
   	              gm_3set_d_join.setString(1, sessionID);
   	              gm_3set_d_join.execute(); 
   	             ResultSet rs_gm_d_join =gm_3set_d_join.getResultSet();
   	              while(rs_gm_d_join.next()) {
                         System.out.println("GO_ID: " + rs_gm_d_join.getString("GO_ID"));
                         System.out.println("NAME: " +rs_gm_d_join.getString("NAME"));
                         System.out.println("PARENTS: " +rs_gm_d_join.getString("PARENTS"));
                         System.out.println("DEPTH: " +rs_gm_d_join.getString("DEPTH"));
   	              } 
   	              //SET
             		ResultSet rs_gm_e = gm_3set.executeQuery("select * from GM_e_"+sessionID);
             		System.out.println("GM_3SET && GM_e_sessionID "); 
             		while(rs_gm_e.next()) {                          
                    		        System.out.println(rs_gm_e.getString("ONTOLOGY"));
             		} 
             		 //JOIN
      			     CallableStatement gm_3set_e_join =connection.prepareCall("{ call 3SET_GM_e_(?) }");
      	              gm_3set_e_join.setString(1, sessionID);
      	              gm_3set_e_join.execute(); 
      	             ResultSet rs_gm_e_join =gm_3set_e_join.getResultSet();
      	              while(rs_gm_e_join.next()) {
                            System.out.println("GO_ID: " + rs_gm_e_join.getString("GO_ID"));
                            System.out.println("NAME: " +rs_gm_e_join.getString("NAME"));
                            System.out.println("PARENTS: " +rs_gm_e_join.getString("PARENTS"));
                            System.out.println("DEPTH: " +rs_gm_e_join.getString("DEPTH"));
      	              } 
      	             //SET 
             		ResultSet rs_gm_f = gm_3set.executeQuery("select * from GM_f_"+sessionID);
             		System.out.println("GM_3SET && GM_f_sessionID "); 
             		while(rs_gm_f.next()) {                          
                    		        System.out.println(rs_gm_f.getString("ONTOLOGY"));
             		} 
             		//JOIN
             		  CallableStatement gm_3set_f_join =connection.prepareCall("{ call 3SET_GM_f_(?) }");
	    	              gm_3set_f_join.setString(1, sessionID);
	    	              gm_3set_f_join.execute(); 
	    	              ResultSet rs_gm_f_join =gm_3set_f_join.getResultSet();
	    	              while(rs_gm_f_join.next()) {
                          System.out.println("GO_ID: " + rs_gm_f_join.getString("GO_ID"));
                          System.out.println("NAME: " +rs_gm_f_join.getString("NAME"));
                          System.out.println("PARENTS: " +rs_gm_f_join.getString("PARENTS"));
                          System.out.println("DEPTH: " +rs_gm_f_join.getString("DEPTH"));
    	              } 
	    	              //SET
             		ResultSet rs_gm_g = gm_3set.executeQuery("select * from GM_g_"+sessionID);
             		System.out.println("GM_3SET && GM_g_sessionID "); 
             		while(rs_gm_g.next()) {                          
                    		        System.out.println(rs_gm_g.getString("ONTOLOGY"));
             		} 
             		//JOIN
           		  	  CallableStatement gm_3set_g_join =connection.prepareCall("{ call 3SET_GM_g_(?) }");
	    	              gm_3set_g_join.setString(1, sessionID);
	    	              gm_3set_g_join.execute(); 
	    	              ResultSet rs_gm_g_join =gm_3set_g_join.getResultSet();
	    	              while(rs_gm_g_join.next()) {
                        System.out.println("GO_ID: " + rs_gm_g_join.getString("GO_ID"));
                        System.out.println("NAME: " +rs_gm_g_join.getString("NAME"));
                        System.out.println("PARENTS: " +rs_gm_g_join.getString("PARENTS"));
                        System.out.println("DEPTH: " +rs_gm_g_join.getString("DEPTH"));
  	              } 
             		
             		//GB3SET
	    	            //SET
             		CallableStatement gb_3set =connection.prepareCall("{ call GB_3SET(?) }");
	                gb_3set.setString(1, sessionID);
	                gb_3set.execute();  
	                System.out.println("Callable 2");  
			        ResultSet rs_gb_a = gb_3set.executeQuery("select * from GB_a_"+sessionID);
			        System.out.println("GB_3SET && GB_a_sessionID"); 
	                while(rs_gb_a.next()) {
	                        System.out.println(rs_gb_a.getString("ONTOLOGY"));
	                }  
	              //JOIN
   			     CallableStatement gb_3set_a_join =connection.prepareCall("{ call 3SET_GB_a_(?) }");
   	             gb_3set_a_join.setString(1, sessionID);
   	              gb_3set_a_join.execute(); 
   	             ResultSet rs_gb_a_join =gb_3set_a_join.getResultSet();
	              while(rs_gb_a_join.next()) {
                     System.out.println("GO_ID: " + rs_gb_a_join.getString("GO_ID"));
                     System.out.println("NAME: " +rs_gb_a_join.getString("NAME"));
                     System.out.println("PARENTS: " +rs_gb_a_join.getString("PARENTS"));
                     System.out.println("DEPTH: " +rs_gb_a_join.getString("DEPTH"));
	              } 
	              //SET
	                ResultSet rs_gb_b = gb_3set.executeQuery("select * from GB_b_"+sessionID);
	                System.out.println("GB_2SET && GB_b_sessionID"); 
	                while(rs_gb_b.next()) {
                        System.out.println(rs_gb_b.getString("ONTOLOGY"));
	                }  
	                //JOIN
	   			     CallableStatement gb_3set_b_join =connection.prepareCall("{ call 3SET_GB_b_(?) }");
	   	             gb_3set_b_join.setString(1, sessionID);
	   	              gb_3set_b_join.execute(); 
	   	             ResultSet rs_gb_b_join =gb_3set_b_join.getResultSet();
		              while(rs_gb_b_join.next()) {
	                     System.out.println("GO_ID: " + rs_gb_b_join.getString("GO_ID"));
	                     System.out.println("NAME: " +rs_gb_b_join.getString("NAME"));
	                     System.out.println("PARENTS: " +rs_gb_b_join.getString("PARENTS"));
	                     System.out.println("DEPTH: " +rs_gb_b_join.getString("DEPTH"));
		              } 
		              //SET
	                ResultSet rs_gb_c = gb_3set.executeQuery("select * from GB_c_"+sessionID);
	                System.out.println("GB_2SET && GB_c_sessionID"); 
	                while(rs_gb_c.next()) {
                        System.out.println(rs_gb_c.getString("ONTOLOGY"));
	                }
	                //JOIN
	   			     CallableStatement gb_3set_c_join =connection.prepareCall("{ call 3SET_GB_c_(?) }");
	   	             gb_3set_c_join.setString(1, sessionID);
	   	              gb_3set_c_join.execute(); 
	   	             ResultSet rs_gb_c_join =gb_3set_c_join.getResultSet();
		              while(rs_gb_c_join.next()) {
	                     System.out.println("GO_ID: " + rs_gb_c_join.getString("GO_ID"));
	                     System.out.println("NAME: " +rs_gb_c_join.getString("NAME"));
	                     System.out.println("PARENTS: " +rs_gb_c_join.getString("PARENTS"));
	                     System.out.println("DEPTH: " +rs_gb_c_join.getString("DEPTH"));
		              } 
		              
		             //SET
	                ResultSet rs_gb_d = gb_3set.executeQuery("select * from GB_d_"+sessionID);
	                System.out.println("GB_2SET && GB_d_sessionID"); 
	                while(rs_gb_d.next()) {
                        System.out.println(rs_gb_d.getString("ONTOLOGY"));
	                }
	                //JOIN
	   			     CallableStatement gb_3set_d_join =connection.prepareCall("{ call 3SET_GB_d_(?) }");
	   	             gb_3set_d_join.setString(1, sessionID);
	   	              gb_3set_d_join.execute(); 
	   	             ResultSet rs_gb_d_join =gb_3set_d_join.getResultSet();
		              while(rs_gb_d_join.next()) {
	                     System.out.println("GO_ID: " + rs_gb_d_join.getString("GO_ID"));
	                     System.out.println("NAME: " +rs_gb_d_join.getString("NAME"));
	                     System.out.println("PARENTS: " +rs_gb_d_join.getString("PARENTS"));
	                     System.out.println("DEPTH: " +rs_gb_d_join.getString("DEPTH"));
		              } 
		              //SET
	                ResultSet rs_gb_e = gb_3set.executeQuery("select * from GB_e_"+sessionID);
	                System.out.println("GB_2SET && GB_e_sessionID"); 
	                while(rs_gb_e.next()) {
                        System.out.println(rs_gb_e.getString("ONTOLOGY"));
	                }
	                //JOIN
	   			     CallableStatement gb_3set_e_join =connection.prepareCall("{ call 3SET_GB_e_(?) }");
	   	             gb_3set_e_join.setString(1, sessionID);
	   	              gb_3set_e_join.execute(); 
	   	             ResultSet rs_gb_e_join =gb_3set_e_join.getResultSet();
		              while(rs_gb_e_join.next()) {
	                     System.out.println("GO_ID: " + rs_gb_e_join.getString("GO_ID"));
	                     System.out.println("NAME: " +rs_gb_e_join.getString("NAME"));
	                     System.out.println("PARENTS: " +rs_gb_e_join.getString("PARENTS"));
	                     System.out.println("DEPTH: " +rs_gb_e_join.getString("DEPTH"));
		              } 
		              //SET
	                ResultSet rs_gb_f = gb_3set.executeQuery("select * from GB_f_"+sessionID);
	                System.out.println("GB_2SET && GB_f_sessionID"); 
	                while(rs_gb_f.next()) {
                        System.out.println(rs_gb_f.getString("ONTOLOGY"));
	                }
	              //JOIN
	   			     CallableStatement gb_3set_f_join =connection.prepareCall("{ call 3SET_GB_f_(?) }");
	   	             gb_3set_f_join.setString(1, sessionID);
	   	              gb_3set_f_join.execute(); 
	   	             ResultSet rs_gb_f_join =gb_3set_f_join.getResultSet();
		              while(rs_gb_f_join.next()) {
	                     System.out.println("GO_ID: " + rs_gb_f_join.getString("GO_ID"));
	                     System.out.println("NAME: " +rs_gb_f_join.getString("NAME"));
	                     System.out.println("PARENTS: " +rs_gb_f_join.getString("PARENTS"));
	                     System.out.println("DEPTH: " +rs_gb_f_join.getString("DEPTH"));
		              } 
		              //SET
	                ResultSet rs_gb_g = gb_3set.executeQuery("select * from GB_g_"+sessionID);
	                System.out.println("GB_3SET && GB_g_sessionID"); 
	                while(rs_gb_g.next()) {
                        System.out.println(rs_gb_g.getString("ONTOLOGY"));
	                }
	              //JOIN
	   			     CallableStatement gb_3set_g_join =connection.prepareCall("{ call 3SET_GB_g_(?) }");
	   	             gb_3set_g_join.setString(1, sessionID);
	   	              gb_3set_g_join.execute(); 
	   	             ResultSet rs_gb_g_join =gb_3set_g_join.getResultSet();
		              while(rs_gb_g_join.next()) {
	                     System.out.println("GO_ID: " + rs_gb_g_join.getString("GO_ID"));
	                     System.out.println("NAME: " +rs_gb_g_join.getString("NAME"));
	                     System.out.println("PARENTS: " +rs_gb_g_join.getString("PARENTS"));
	                     System.out.println("DEPTH: " +rs_gb_g_join.getString("DEPTH"));
		              } 
	                //PW3SET
	                //SET
	                CallableStatement pw_3set =connection.prepareCall("{ call PW_3SET(?) }");
	                pw_3set.setString(1, sessionID);
	                pw_3set.execute();  
  	                System.out.println("Callable 2");  
  			        ResultSet rs_pw_a = pw_3set.executeQuery("select * from PW_a_"+sessionID);
  			        System.out.println("PW_3SET && PW_a_sessionID"); 
  	                while(rs_pw_a.next()) {
  	                        System.out.println(rs_pw_a.getString("PATHWAY"));
  	                }  
  	              //JOIN
    	              CallableStatement pw_3set_a_join =connection.prepareCall("{ call 3SET_PW_a_(?) }");
  	              pw_3set_a_join.setString(1, sessionID);
  	              pw_3set_a_join.execute(); 
  	             ResultSet rs_pw_a_join =pw_3set_a_join.getResultSet();
  	              while(rs_pw_a_join.next()) {
                        System.out.println("IPR_ID: " + rs_pw_a_join.getString("IPR_ID"));
                        System.out.println("NAME: " +rs_pw_a_join.getString("NAME"));
                        System.out.println("PARENTS: " +rs_pw_a_join.getString("PARENTS"));
                    }  
  	              //SET
  	                ResultSet rs_pw_b = pw_3set.executeQuery("select * from PW_b_"+sessionID);
			        System.out.println("PW_3SET && PW_b_sessionID"); 
	                while(rs_pw_b.next()) {
	                        System.out.println(rs_pw_b.getString("PATHWAY"));
	                }  
	                //JOIN
  	              CallableStatement pw_3set_b_join =connection.prepareCall("{ call 3SET_PW_b_(?) }");
	              pw_3set_b_join.setString(1, sessionID);
	              pw_3set_b_join.execute(); 
	             ResultSet rs_pw_b_join =pw_3set_b_join.getResultSet();
	              while(rs_pw_b_join.next()) {
                      System.out.println("IPR_ID: " + rs_pw_b_join.getString("IPR_ID"));
                      System.out.println("NAME: " +rs_pw_b_join.getString("NAME"));
                      System.out.println("PARENTS: " +rs_pw_b_join.getString("PARENTS"));
                  }  
	              	//SET
	                ResultSet rs_pw_c = pw_3set.executeQuery("select * from PW_c_"+sessionID);
			        System.out.println("PW_3SET && PW_c_sessionID"); 
	                while(rs_pw_c.next()) {
	                        System.out.println(rs_pw_c.getString("PATHWAY"));
	                } 
	                //JOIN
	  	              CallableStatement pw_3set_c_join =connection.prepareCall("{ call 3SET_PW_c_(?) }");
		              pw_3set_c_join.setString(1, sessionID);
		              pw_3set_c_join.execute(); 
		             ResultSet rs_pw_c_join =pw_3set_c_join.getResultSet();
		              while(rs_pw_c_join.next()) {
	                      System.out.println("IPR_ID: " + rs_pw_c_join.getString("IPR_ID"));
	                      System.out.println("NAME: " +rs_pw_c_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_pw_c_join.getString("PARENTS"));
	                  }  
		              //SET
	                ResultSet rs_pw_d = pw_3set.executeQuery("select * from PW_d_"+sessionID);
			        System.out.println("PW_3SET && PW_d_sessionID"); 
	                while(rs_pw_d.next()) {
	                        System.out.println(rs_pw_d.getString("PATHWAY"));
	                } 
	                //JOIN
	  	              CallableStatement pw_3set_d_join =connection.prepareCall("{ call 3SET_PW_d_(?) }");
		              pw_3set_d_join.setString(1, sessionID);
		              pw_3set_d_join.execute(); 
		             ResultSet rs_pw_d_join =pw_3set_d_join.getResultSet();
		              while(rs_pw_d_join.next()) {
	                      System.out.println("IPR_ID: " + rs_pw_d_join.getString("IPR_ID"));
	                      System.out.println("NAME: " +rs_pw_d_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_pw_d_join.getString("PARENTS"));
	                  } 
		              //SET
	                ResultSet rs_pw_e = pw_3set.executeQuery("select * from PW_e_"+sessionID);
			        System.out.println("PW_3SET && PW_e_sessionID"); 
	                while(rs_pw_e.next()) {
	                        System.out.println(rs_pw_e.getString("PATHWAY"));
	                } 
	                //JOIN
	  	              CallableStatement pw_3set_e_join =connection.prepareCall("{ call 3SET_PW_e_(?) }");
		              pw_3set_e_join.setString(1, sessionID);
		              pw_3set_e_join.execute(); 
		             ResultSet rs_pw_e_join =pw_3set_e_join.getResultSet();
		              while(rs_pw_e_join.next()) {
	                      System.out.println("IPR_ID: " + rs_pw_e_join.getString("IPR_ID"));
	                      System.out.println("NAME: " +rs_pw_e_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_pw_e_join.getString("PARENTS"));
	                  } 
		              //SET
	                ResultSet rs_pw_f = pw_3set.executeQuery("select * from PW_f_"+sessionID);
			        System.out.println("PW_3SET && PW_f_sessionID"); 
	                while(rs_pw_f.next()) {
	                        System.out.println(rs_pw_f.getString("PATHWAY"));
	                } 
	                //JOIN
	  	              CallableStatement pw_3set_f_join =connection.prepareCall("{ call 3SET_PW_f_(?) }");
		              pw_3set_f_join.setString(1, sessionID);
		              pw_3set_f_join.execute(); 
		             ResultSet rs_pw_f_join =pw_3set_f_join.getResultSet();
		              while(rs_pw_f_join.next()) {
	                      System.out.println("IPR_ID: " + rs_pw_f_join.getString("IPR_ID"));
	                      System.out.println("NAME: " +rs_pw_f_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_pw_f_join.getString("PARENTS"));
	                  } 
		              //SET
	                ResultSet rs_pw_g = pw_3set.executeQuery("select * from PW_g_"+sessionID);
			        System.out.println("PW_3SET && PW_g_sessionID"); 
	                while(rs_pw_g.next()) {
	                        System.out.println(rs_pw_g.getString("PATHWAY"));
	                } 
	                //JOIN
	  	              CallableStatement pw_3set_g_join =connection.prepareCall("{ call 3SET_PW_g_(?) }");
		              pw_3set_g_join.setString(1, sessionID);
		              pw_3set_g_join.execute(); 
		             ResultSet rs_pw_g_join =pw_3set_g_join.getResultSet();
		              while(rs_pw_g_join.next()) {
	                      System.out.println("IPR_ID: " + rs_pw_g_join.getString("IPR_ID"));
	                      System.out.println("NAME: " +rs_pw_g_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_pw_g_join.getString("PARENTS"));
	                  } 
			
	                //DM3SET
		              //SET
	                CallableStatement dm_3set =connection.prepareCall("{ call DM_3SET(?) }");
		            dm_3set.setString(1, sessionID);
		            dm_3set.execute();  
		            System.out.println("Callable 1");  
				    ResultSet rs_dm_a = dm_3set.executeQuery("select * from DM_a_"+sessionID);
				    System.out.println("DM_3SET && DM_a_sessionID"); 
		            while(rs_dm_a.next()) {
		                    System.out.println(rs_dm_a.getString("DOMAIN"));
		            }  
		          //JOIN
		              CallableStatement dm_3set_a_join =connection.prepareCall("{ call 3SET_DM_a_(?) }");
		              dm_3set_a_join.setString(1, sessionID);
		              dm_3set_a_join.execute(); 
		             ResultSet rs_dm_a_join =dm_3set_a_join.getResultSet();
		              while(rs_dm_a_join.next()) {
	                      System.out.println("IPR: " + rs_dm_a_join.getString("IPR"));
	                      System.out.println("NAME: " +rs_dm_a_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_dm_a_join.getString("PARENTS"));
	                  }  
		              //SET
				    ResultSet rs_dm_b = dm_3set.executeQuery("select * from DM_b_"+sessionID);
				    System.out.println("DM_3SET && DM_b_sessionID"); 
		            while(rs_dm_b.next()) {
		                   System.out.println(rs_dm_b.getString("DOMAIN"));
		            }
		            //JOIN
		              CallableStatement dm_3set_b_join =connection.prepareCall("{ call 3SET_DM_b_(?) }");
		              dm_3set_b_join.setString(1, sessionID);
		              dm_3set_b_join.execute(); 
		             ResultSet rs_dm_b_join =dm_3set_b_join.getResultSet();
		              while(rs_dm_b_join.next()) {
	                      System.out.println("IPR: " + rs_dm_b_join.getString("IPR"));
	                      System.out.println("NAME: " +rs_dm_b_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_dm_b_join.getString("PARENTS"));
	                  }  
		              //SET
		            ResultSet rs_dm_c = dm_3set.executeQuery("select * from DM_c_"+sessionID);
				    System.out.println("DM_3SET && DM_c_sessionID"); 
		            while(rs_dm_c.next()) {
		                   System.out.println(rs_dm_c.getString("DOMAIN"));
		            } 
		            //JOIN
		              CallableStatement dm_3set_c_join =connection.prepareCall("{ call 3SET_DM_c_(?) }");
		              dm_3set_c_join.setString(1, sessionID);
		              dm_3set_c_join.execute(); 
		             ResultSet rs_dm_c_join =dm_3set_c_join.getResultSet();
		              while(rs_dm_c_join.next()) {
	                      System.out.println("IPR: " + rs_dm_c_join.getString("IPR"));
	                      System.out.println("NAME: " +rs_dm_c_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_dm_c_join.getString("PARENTS"));
	                  }  
		              //SET
		            ResultSet rs_dm_d = dm_3set.executeQuery("select * from DM_d_"+sessionID);
				    System.out.println("DM_3SET && DM_d_sessionID"); 
		            while(rs_dm_d.next()) {
		                   System.out.println(rs_dm_d.getString("DOMAIN"));
		            } 
		          //JOIN
		              CallableStatement dm_3set_d_join =connection.prepareCall("{ call 3SET_DM_d_(?) }");
		              dm_3set_d_join.setString(1, sessionID);
		              dm_3set_d_join.execute(); 
		             ResultSet rs_dm_d_join =dm_3set_d_join.getResultSet();
		              while(rs_dm_d_join.next()) {
	                      System.out.println("IPR: " + rs_dm_d_join.getString("IPR"));
	                      System.out.println("NAME: " +rs_dm_d_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_dm_d_join.getString("PARENTS"));
	                  }  
		              //SET
		            ResultSet rs_dm_e = dm_3set.executeQuery("select * from DM_e_"+sessionID);
				    System.out.println("DM_3SET && DM_e_sessionID"); 
		            while(rs_dm_e.next()) {
		                   System.out.println(rs_dm_e.getString("DOMAIN"));
		            } 
		          //JOIN
		              CallableStatement dm_3set_e_join =connection.prepareCall("{ call 3SET_DM_e_(?) }");
		              dm_3set_e_join.setString(1, sessionID);
		              dm_3set_e_join.execute(); 
		             ResultSet rs_dm_e_join =dm_3set_e_join.getResultSet();
		              while(rs_dm_e_join.next()) {
	                      System.out.println("IPR: " + rs_dm_e_join.getString("IPR"));
	                      System.out.println("NAME: " +rs_dm_e_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_dm_e_join.getString("PARENTS"));
	                  }  
		              //SET
		            ResultSet rs_dm_f = dm_3set.executeQuery("select * from DM_f_"+sessionID);
				    System.out.println("DM_3SET && DM_f_sessionID"); 
		            while(rs_dm_f.next()) {
		                   System.out.println(rs_dm_f.getString("DOMAIN"));
		            } 
		          //JOIN
		              CallableStatement dm_3set_f_join =connection.prepareCall("{ call 3SET_DM_f_(?) }");
		              dm_3set_f_join.setString(1, sessionID);
		              dm_3set_f_join.execute(); 
		             ResultSet rs_dm_f_join =dm_3set_f_join.getResultSet();
		              while(rs_dm_f_join.next()) {
	                      System.out.println("IPR: " + rs_dm_f_join.getString("IPR"));
	                      System.out.println("NAME: " +rs_dm_f_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_dm_f_join.getString("PARENTS"));
	                  }  
		              //SET
		            ResultSet rs_dm_g = dm_3set.executeQuery("select * from DM_g_"+sessionID);
				    System.out.println("DM_3SET && DM_g_sessionID"); 
		            while(rs_dm_g.next()) {
		                   System.out.println(rs_dm_g.getString("DOMAIN"));
		            } 
		          //JOIN
		              CallableStatement dm_3set_g_join =connection.prepareCall("{ call 3SET_DM_g_(?) }");
		              dm_3set_g_join.setString(1, sessionID);
		              dm_3set_g_join.execute(); 
		             ResultSet rs_dm_g_join =dm_3set_g_join.getResultSet();
		              while(rs_dm_g_join.next()) {
	                      System.out.println("IPR: " + rs_dm_g_join.getString("IPR"));
	                      System.out.println("NAME: " +rs_dm_g_join.getString("NAME"));
	                      System.out.println("PARENTS: " +rs_dm_g_join.getString("PARENTS"));
	                  }  
		}	
}
		
    
public void  callJoinFunction(Connection conn) throws SQLException {
		call_GM_StoredProcedure(conn);	
	        call_GB_StoredProcedure(conn);  
		collect_lastset.clear();
		System.out.println("Last collect last set was cleared" + collect_lastset);
			

	}
		public List<HashMap<String, String>> call_GM_StoredProcedure(Connection connection) throws SQLException {
		/*	List<String> result = new ArrayList<>();
			if(map_size==1) {
				 CallableStatement gm_1set_join =connection.prepareCall("{ call 1SET_GM_a_(?) }");
	             gm_1set_join.setString(1, sessionID);
	             gm_1set_join.execute(); 

	             ResultSet rs_gm_a_join =gm_1set_join.getResultSet();
	              while(rs_gm_a_join.next()) {
  		    result.add(rs_gm_a_join.getString("GO_ID"));
	            	  result.add(rs_gm_a_join.getString("NAME"));
	            	  result.add(rs_gm_a_join.getString("PARENTS"));
	            	  result.add(rs_gm_a_join.getString("DEPTH"));
		    
                     System.out.println("GO_ID: " + rs_gm_a_join.getString("GO_ID"));
                     System.out.println("NAME: " +rs_gm_a_join.getString("NAME"));
                     System.out.println("PARENTS: " +rs_gm_a_join.getString("PARENTS"));
                     System.out.println("DEPTH: " +rs_gm_a_join.getString("DEPTH"));
	              }
		
			}
			System.out.println("PROCEDURE RESULT IS: " + result);
			return result;
		*/
		List<HashMap<String, String>> result = new ArrayList<HashMap<String, String>>();
		//	List<JSONObject> jsonObj = new ArrayList<JSONObject>();
			if(map_size==1) {
				 CallableStatement gm_1set_join =connection.prepareCall("{ call 1SET_GM_a_(?,?) }");
	             gm_1set_join.setString(1, sessionID);
	             gm_1set_join.execute(); 
	             ResultSet rs_gm_a_join =gm_1set_join.getResultSet();
			System.out.println("UPDATE COUNT" + gm_1set_join.getUpdateCount());	           
	              while(rs_gm_a_join.next()) {
	            	  HashMap<String, String> data = new HashMap<String, String>();
	            	  data.put("go_id", rs_gm_a_join.getString("GO_ID"));
	            	  data.put("name", rs_gm_a_join.getString("NAME"));
	            	  data.put("parents", rs_gm_a_join.getString("PARENTS"));
	            	  data.put("depth", rs_gm_a_join.getString("DEPTH"));
	            	
	            	  result.add(data);
	            	  	
	              } 
	             // List<JSONObject> jsonObj = new ArrayList<JSONObject>();
	  	              
			}
			//System.out.println("JSON OBJECT =" + jsonObj);
			System.out.println("RESUL LİST HASH: " + result);
			return result;
			
			
		}
		

	
		 public List<HashMap<String,String>> call_GB_StoredProcedure(Connection connection) throws SQLException{
			List<HashMap<String, String>> result = new ArrayList<HashMap<String, String>>();
			if(map_size==1) {
				 //JOIN GB
	               CallableStatement gb_1set_join =connection.prepareCall("{ call 1SET_GB_a_(?) }");
	               gb_1set_join.setString(1, sessionID);
	               gb_1set_join.execute(); 
	              ResultSet rs_gb_a_join =gb_1set_join.getResultSet();
	                  while(rs_gb_a_join.next()) {
	            	   HashMap<String, String> data = new HashMap<String, String>();
	            	   data.put("go_id", rs_gb_a_join.getString("GO_ID"));
	            	   data.put("name", rs_gb_a_join.getString("NAME"));
	            	   data.put("parents", rs_gb_a_join.getString("PARENTS"));
	            	   data.put("depth", rs_gb_a_join.getString("DEPTH"));
	            	
	            	  result.add(data);
				
	                  }
         	      }
			return result;
		}




		public void call_PW_StoredProcedure(Connection connection,int querynumber) throws SQLException {
			if(querynumber==1) {
				 //JOIN PW
	            CallableStatement pw_1set_join =connection.prepareCall("{ call 1SET_PW_a_(?) }");
	            pw_1set_join.setString(1, sessionID);
	            pw_1set_join.execute(); 
	           ResultSet rs_pw_a_join =pw_1set_join.getResultSet();
	            while(rs_pw_a_join.next()) {
	                System.out.println("IPR_ID: " + rs_pw_a_join.getString("IPR_ID"));
	                System.out.println("NAME: " +rs_pw_a_join.getString("NAME"));
	                System.out.println("PARENTS: " +rs_pw_a_join.getString("PARENTS"));
	            }  
			}
            
		}
		
		public void call_DM_StoredProcedure(Connection connection,int querynumber) throws SQLException {
			if(querynumber==1) {

	              //JOIN DM
	              CallableStatement dm_1set_join =connection.prepareCall("{ call 1SET_DM_a_(?) }");
	              dm_1set_join.setString(1, sessionID);
	              dm_1set_join.execute(); 
	             ResultSet rs_dm_a_join =dm_1set_join.getResultSet();
	              while(rs_dm_a_join.next()) {
                    System.out.println("IPR: " + rs_dm_a_join.getString("IPR"));
                    System.out.println("NAME: " +rs_dm_a_join.getString("NAME"));
                    System.out.println("PARENTS: " +rs_dm_a_join.getString("PARENTS"));
                }  
			}
		}
		
		


        		//1		
			public CriteriaQuery searchProteinbyDiseaseAcc (int ACC) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("DISEASE").get("ACC"), ACC));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//2		 
			public CriteriaQuery searchProteinbyDiseaseMim (int MIM) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("DISEASE").get("MIM"), MIM));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			//3
			public CriteriaQuery searchProteinbyDiseaseIdentifier (String IDENTIFIER) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.like(protein.join("DISEASE").get("IDENTIFIER"),"%"+IDENTIFIER+"%"));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//4
			public CriteriaQuery searchProteinbyDiseaseAcronym (String ACRONYM) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.like(protein.join("DISEASE").get("ACRONYM"), "%"+ACRONYM+"%"));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//5
			public CriteriaQuery searchProteinbyDiseaseDefinition (String DEFINITION) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("DISEASE").get("DEFINITION"), DEFINITION));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//6 
			public CriteriaQuery searchProteinbyDomainPfam (int PFAM) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("DOMAIN").get("PFAM"), PFAM));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//7 
			public CriteriaQuery searchProteinbyDomainIpr_id (int IPR_ID) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("DOMAIN").get("IPR_ID"), IPR_ID));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//8 
			public CriteriaQuery searchProteinbyDomainEntry_type (String ENTRY_TYPE) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("DOMAIN").get("ENTRY_TYPE"), ENTRY_TYPE));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//9 
			public CriteriaQuery searchProteinbyDomainName (String NAME) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.like(protein.join("DOMAIN").get("NAME"), "%"+NAME+"%"));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//10
			public CriteriaQuery searchProteinbyDomainParent_name (String PARENT_NAME) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("DOMAIN").get("PARENT_NAME"), PARENT_NAME));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//11 
			public CriteriaQuery searchProteinbyDomainParent_id (int PARENT_ID) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("DOMAIN").get("PARENT_ID"), PARENT_ID));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//12 
			public CriteriaQuery searchProteinbyGeneId (int ID) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("GENE").get("ID"), ID));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//13 
			public CriteriaQuery searchProteinbyGeneSymbol (String SYMBOL) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("GENE").get("SYMBOL"), SYMBOL));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//14 
			public CriteriaQuery searchProteinbyGeneLocustag (String LOCUSTAG) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("GENE").get("LOCUSTAG"), LOCUSTAG));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//15 
			public CriteriaQuery searchProteinbyGeneDescription (String DESCRIPTION) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("GENE").get("DESCRIPTION"), DESCRIPTION));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//16
			public CriteriaQuery searchProteinbyGo_termsTerm_id (int TERM_ID) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("GO_TERMS").get("TERM_ID"), TERM_ID));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//17 
			public CriteriaQuery searchProteinbyGo_termsName (String NAME) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.like(protein.join("GO_TERMS").get("NAME"),"%"+NAME+"%"));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//18 
			public CriteriaQuery searchProteinbyGo_termsNamespace (int NAMESPACE) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("GO_TERMS").get("NAMESPACE"), NAMESPACE));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//19 
			public CriteriaQuery searchProteinbyGo_termsDefinition (String DEFINITION) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("GO_TERMS").get("DEFINITION"), DEFINITION));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//20
			public CriteriaQuery searchProteinbyGo_termsIs_obsolete (int IS_OBSOLETE) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("GO_TERMS").get("IS_OBSOLETE"), IS_OBSOLETE));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//21 
			public CriteriaQuery searchProteinbyPathwayId (int ID) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("PATHWAY").get("ID"), ID));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//22 
			public CriteriaQuery searchProteinbyPathwayName (String NAME) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.like(protein.join("PATHWAY").get("NAME"), "%"+NAME+"%"));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//23 
			public CriteriaQuery searchProteinbyPathwaySpecies (String SPECIES) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("PATHWAY").get("SPECIES"), SPECIES));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//24
			public CriteriaQuery searchProteinbyProteinAccession (String ACCESSION) {
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery cq = cb.createQuery();
				Root<PROTEIN> protein = cq.from(PROTEIN.class);
				List<Predicate> predicates = new ArrayList<Predicate>();
				predicates.add(cb.like(protein.get("ACCESSION"), "%"+ACCESSION+"%"));
				cq.select(protein.get("ACCESSION")).where(predicates.toArray(new Predicate[]{}));
				return cq;
			}
			
			//25
			public CriteriaQuery searchProteinbyProteinId (String ID) {
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery cq = cb.createQuery();
				Root<PROTEIN> protein = cq.from(PROTEIN.class);
				List<Predicate> predicates = new ArrayList<Predicate>();
				predicates.add(cb.like(protein.get("ID"), "%"+ID+"%"));
				cq.select(protein.get("ACCESSION")).where(predicates.toArray(new Predicate[]{}));
				return cq;
			}
			
			//26
			public CriteriaQuery searchProteinbyProteinName (String NAME) {
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery cq = cb.createQuery();
				Root<PROTEIN> protein = cq.from(PROTEIN.class);
				List<Predicate> predicates = new ArrayList<Predicate>();
				predicates.add(cb.like(protein.get("NAME"), "%"+NAME+"%"));
				cq.select(protein.get("ACCESSION")).where(predicates.toArray(new Predicate[]{}));
				return cq;
			}
			
			//27
			public CriteriaQuery searchProteinbyProteinTaxon_id (int TAXON_ID) {
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery cq = cb.createQuery();
				Root<PROTEIN> protein = cq.from(PROTEIN.class);
				List<Predicate> predicates = new ArrayList<Predicate>();
				predicates.add(cb.equal(protein.get("TAXON_ID"), TAXON_ID));
				cq.select(protein.get("ACCESSION")).where(predicates.toArray(new Predicate[]{}));
				return cq;
			}
			
			//28
			public CriteriaQuery searchProteinbyProteinIs_reviewed (int IS_REVIEWED) {
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery cq = cb.createQuery();
				Root<PROTEIN> protein = cq.from(PROTEIN.class);
				List<Predicate> predicates = new ArrayList<Predicate>();
				predicates.add(cb.equal(protein.get("IS_REVIEWED"), IS_REVIEWED));
				cq.select(protein.get("ACCESSION")).where(predicates.toArray(new Predicate[]{}));
				return cq;
			}
			
			//29
			public CriteriaQuery searchProteinbyProteinLength (int LENGTH) {
				CriteriaBuilder cb = em.getCriteriaBuilder();
				CriteriaQuery cq = cb.createQuery();
				Root<PROTEIN> protein = cq.from(PROTEIN.class);
				List<Predicate> predicates = new ArrayList<Predicate>();
				predicates.add(cb.equal(protein.get("LENGTH"), LENGTH));
				cq.select(protein.get("ACCESSION")).where(predicates.toArray(new Predicate[]{}));
				return cq;
			}
			
			//30 
			public CriteriaQuery searchProteinbyProtein_crossrefAccession (String ACCESSION) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("protein_crossref").get("ACCESSION"), ACCESSION));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//31
			public CriteriaQuery searchProteinbyProtein_crossrefType (String TYPE) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("protein_crossref").get("TYPE"), TYPE));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//32 
			public CriteriaQuery searchProteinbyProtein_crossrefCrossref (String CROSSREF) {
				 System.out.println("IN THE FUNCTION!!!");
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				 System.out.println("RESTRICTIONS");
				restrictions.add(builder.equal(protein.join("protein_crossref").get("CROSSREF"), CROSSREF));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				 System.out.println("CRIT:" +  " " + crit);
				return crit;    
			}
			
			//33 
			public CriteriaQuery searchProteinbyProtein_pdbAccession (String ACCESSION) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("PROTEIN_PDB").get("ACCESSION"), ACCESSION));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//34
			public CriteriaQuery searchProteinbyProtein_pdbPdb (String PDB) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.like(protein.join("PROTEIN_PDB").get("PDB"),"%"+PDB+"%"));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//35
			public CriteriaQuery searchProteinbyProtein_pdbChain (String CHAIN) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.like(protein.join("PROTEIN_PDB").get("CHAIN"), "%"+CHAIN+"%"));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//36
			public CriteriaQuery searchProteinbyPublicationPmid (int PMID) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("PUBLICATION").get("PMID"), PMID));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//37
			public CriteriaQuery searchProteinbyPublicationTitle (String TITLE) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.like(protein.join("PUBLICATION").get("TITLE"), "%"+TITLE+"%"));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//38
			public CriteriaQuery searchProteinbyPublicationLocation (String LOCATION) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("PUBLICATION").get("LOCATION"), LOCATION));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//39
			public CriteriaQuery searchProteinbyTaxonId (int ID) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.equal(protein.join("TAXON").get("ID"), ID));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}
			
			//40
			public CriteriaQuery searchProteinbyTaxonName (String NAME) {
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.like(protein.join("TAXON").get("NAME"), "%"+NAME+"%"));
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				return crit;    
			}

			//41
			public CriteriaQuery searchProteinbyProtein_crossrefTypeCrossref (String TYPE , String CROSSREF) {
				   System.out.println("IN THE FUNCTION!!!");
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				restrictions.add(builder.like(protein.join("protein_crossref").get("TYPE"), "%"+TYPE+"%"));
				restrictions.add(builder.equal(protein.join("protein_crossref").get("CROSSREF"), CROSSREF));
				   System.out.println("RESTRICTIONS!");		
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				   System.out.println("CRIT:" + " " + crit);
				return crit;    
			}
			
			
			
			//42	
			public CriteriaQuery searchProteinbyPrimary_SecondarySecondaryAccession (String SECONDARY_ACCESSION) {
				System.out.println("IN THE FUNCTION!!!");
				CriteriaBuilder builder = em.getCriteriaBuilder();
				CriteriaQuery<PROTEIN> crit = builder.createQuery(PROTEIN.class);
				Root<PROTEIN> protein = crit.from(PROTEIN.class);
				List<Predicate> restrictions = new ArrayList<>();
				 System.out.println("Restrictions" );
				restrictions.add(builder.like(protein.join("primary2secondary").get("SECONDARY_ACCESSION"),"%"+SECONDARY_ACCESSION+"%"));
				 System.out.println("Restrictions" + " " + restrictions);
				crit.select(protein.get("ACCESSION")).where(restrictions.toArray(new Predicate[]{}));	          
				System.out.println("Crit" + " " + crit);
				return crit;    
			}
			

}


